{"version":3,"sources":["photo-resize.min.js","/source/photo-resize.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","factory","SubjectLocation","define","amd","mod","global","piexif","resize","photoResize","this","_piexif","_resize","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_piexif2","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","PhotoResize","worker","USE_WORKER","file","width","height","callback","isUp","that","reader","FileReader","onload","result","readAsDataURL","data","exifObj","load","ret","ImageIFD","ImageWidth","ImageLength","ExifIFD","PixelXDimension","PixelYDimension","ee","isSwapSide","temp","ori","getOrientation","photo","origw","origh","dstw","dsth","Resize","_loadExif","canvas","document","createElement","ctx","getContext","image","Image","crossOrigin","event","scale_w","scale_h","scale","scale_w_pixel","scale_h_pixel","drawImage","_JSImageResizer","getImageData","buffer","tempcanvas","tempcontext","_updateCanvas","createImageData","_setSize","toDataURL","src","beforeexif","exifStr","dump","insert","contextHandlePassed","imageBuffer","frameBuffer","x","putImageData","Orientation","output","ifd","tag","TAGS","startsWith","datas","split","window","atob","./plugins/piexif","./plugins/resize","2","module","copy","JSON","parse","stringify","_get_thumbnail","jpeg","segments","splitIntoSegments","slice","concat","join","_pack_byte","array","pack","nStr","_pack_short","_pack_long","_value_to_bytes","raw_value","value_type","offset","new_value","num","den","four_bytes_over","value_str","length_str","_dict_to_bytes","ifd_dict","ifd_offset","entries_length","TIFF_HEADER_LENGTH","tag_count","keys","entry_header","indexOf","entries","values","parseInt","key_str","type_str","TYPES","b","ExifReader","app1","getExifSeg","tiftag","mark","Array","littleEndian","packed","p","val","c","valStr","toLowerCase","String","fromCharCode","Math","floor","reverse","unpack","str","markPointer","unpacked","strPointer","sliced","charCodeAt","push","ch","head","endPoint","seg","mergeSegments","exif","remove","b64","new_data","btoa","input_data","exif_dict","0th","Exif","GPS","Interop","1st","thumbnail","exifReader","endian_mark","pointer","get_ifd","first_ifd_pointer","end","thumb","exif_dict_original","zeroth_ifd","exif_ifd","interop_ifd","gps_ifd","first_ifd","header","exif_is","gps_is","interop_is","first_is","exif_set","gps_set","interop_set","first_set","zeroth_set","zeroth_length","exif_bytes","exif_length","gps_bytes","gps_length","interop_bytes","interop_length","first_bytes","exif_pointer","gps_pointer","interop_pointer","pointer_value","pointer_str","thumbnail_pointer","thumbnail_p_bytes","thumbnail_length_bytes","zeroth_bytes","ifd_name","value_num","v_set","convert_value","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","keyStr","isNaN","charAt","replace","Byte","Ascii","Short","Long","Rational","Undefined","SLong","SRational","11","name","type","254","255","256","257","258","259","262","263","264","265","266","269","270","271","272","273","274","277","278","279","282","283","284","290","291","292","293","296","301","305","306","315","316","317","318","319","320","321","322","323","324","325","330","332","333","334","336","337","338","339","340","341","342","343","344","345","346","347","351","512","513","514","515","517","518","519","520","521","529","530","531","532","700","18246","18249","32781","33421","33422","33423","33432","33434","34377","34665","34675","34853","34857","34858","34859","37387","37388","37389","37390","37391","37392","37393","37394","37395","37397","37398","37399","40091","40092","40093","40094","40095","50341","50706","50707","50708","50709","50710","50711","50712","50713","50714","50715","50716","50717","50718","50719","50720","50721","50722","50723","50724","50725","50726","50727","50728","50729","50730","50731","50732","50733","50734","50735","50736","50737","50738","50739","50740","50741","50778","50779","50780","50781","50827","50828","50829","50830","50831","50832","50833","50834","50879","50931","50932","50934","50935","50936","50937","50938","50939","50940","50941","50942","50964","50965","50966","50967","50968","50969","50970","50971","50972","50973","50974","50975","50981","50982","51008","51009","51022","33437","34850","34852","34855","34856","34864","34865","34866","34867","34868","34869","36864","36867","36868","37121","37122","37377","37378","37379","37380","37381","37382","37383","37384","37385","37386","37396","37500","37510","37520","37521","37522","40960","40961","40962","40963","40964","40965","41483","41484","41486","41487","41488","41492","41493","41495","41728","41729","41730","41985","41986","41987","41988","41989","41990","41991","41992","41993","41994","41995","41996","42016","42032","42033","42034","42035","42036","42037","42240","0","3","4","5","6","7","8","9","10","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","ProcessingSoftware","NewSubfileType","SubfileType","BitsPerSample","Compression","PhotometricInterpretation","Threshholding","CellWidth","CellLength","FillOrder","DocumentName","ImageDescription","Make","Model","StripOffsets","SamplesPerPixel","RowsPerStrip","StripByteCounts","XResolution","YResolution","PlanarConfiguration","GrayResponseUnit","GrayResponseCurve","T4Options","T6Options","ResolutionUnit","TransferFunction","Software","DateTime","Artist","HostComputer","Predictor","WhitePoint","PrimaryChromaticities","ColorMap","HalftoneHints","TileWidth","TileLength","TileOffsets","TileByteCounts","SubIFDs","InkSet","InkNames","NumberOfInks","DotRange","TargetPrinter","ExtraSamples","SampleFormat","SMinSampleValue","SMaxSampleValue","TransferRange","ClipPath","XClipPathUnits","YClipPathUnits","Indexed","JPEGTables","OPIProxy","JPEGProc","JPEGInterchangeFormat","JPEGInterchangeFormatLength","JPEGRestartInterval","JPEGLosslessPredictors","JPEGPointTransforms","JPEGQTables","JPEGDCTables","JPEGACTables","YCbCrCoefficients","YCbCrSubSampling","YCbCrPositioning","ReferenceBlackWhite","XMLPacket","Rating","RatingPercent","ImageID","CFARepeatPatternDim","CFAPattern","BatteryLevel","Copyright","ExposureTime","ImageResources","ExifTag","InterColorProfile","GPSTag","Interlace","TimeZoneOffset","SelfTimerMode","FlashEnergy","SpatialFrequencyResponse","Noise","FocalPlaneXResolution","FocalPlaneYResolution","FocalPlaneResolutionUnit","ImageNumber","SecurityClassification","ImageHistory","ExposureIndex","TIFFEPStandardID","SensingMethod","XPTitle","XPComment","XPAuthor","XPKeywords","XPSubject","PrintImageMatching","DNGVersion","DNGBackwardVersion","UniqueCameraModel","LocalizedCameraModel","CFAPlaneColor","CFALayout","LinearizationTable","BlackLevelRepeatDim","BlackLevel","BlackLevelDeltaH","BlackLevelDeltaV","WhiteLevel","DefaultScale","DefaultCropOrigin","DefaultCropSize","ColorMatrix1","ColorMatrix2","CameraCalibration1","CameraCalibration2","ReductionMatrix1","ReductionMatrix2","AnalogBalance","AsShotNeutral","AsShotWhiteXY","BaselineExposure","BaselineNoise","BaselineSharpness","BayerGreenSplit","LinearResponseLimit","CameraSerialNumber","LensInfo","ChromaBlurRadius","AntiAliasStrength","ShadowScale","DNGPrivateData","MakerNoteSafety","CalibrationIlluminant1","CalibrationIlluminant2","BestQualityScale","RawDataUniqueID","OriginalRawFileName","OriginalRawFileData","ActiveArea","MaskedAreas","AsShotICCProfile","AsShotPreProfileMatrix","CurrentICCProfile","CurrentPreProfileMatrix","ColorimetricReference","CameraCalibrationSignature","ProfileCalibrationSignature","AsShotProfileName","NoiseReductionApplied","ProfileName","ProfileHueSatMapDims","ProfileHueSatMapData1","ProfileHueSatMapData2","ProfileToneCurve","ProfileEmbedPolicy","ProfileCopyright","ForwardMatrix1","ForwardMatrix2","PreviewApplicationName","PreviewApplicationVersion","PreviewSettingsName","PreviewSettingsDigest","PreviewColorSpace","PreviewDateTime","RawImageDigest","OriginalRawFileDigest","SubTileBlockSize","RowInterleaveFactor","ProfileLookTableDims","ProfileLookTableData","OpcodeList1","OpcodeList2","OpcodeList3","NoiseProfile","FNumber","ExposureProgram","SpectralSensitivity","ISOSpeedRatings","OECF","SensitivityType","StandardOutputSensitivity","RecommendedExposureIndex","ISOSpeed","ISOSpeedLatitudeyyy","ISOSpeedLatitudezzz","ExifVersion","DateTimeOriginal","DateTimeDigitized","ComponentsConfiguration","CompressedBitsPerPixel","ShutterSpeedValue","ApertureValue","BrightnessValue","ExposureBiasValue","MaxApertureValue","SubjectDistance","MeteringMode","LightSource","Flash","FocalLength","SubjectArea","MakerNote","UserComment","SubSecTime","SubSecTimeOriginal","SubSecTimeDigitized","FlashpixVersion","ColorSpace","RelatedSoundFile","InteroperabilityTag","FileSource","SceneType","CustomRendered","ExposureMode","WhiteBalance","DigitalZoomRatio","FocalLengthIn35mmFilm","SceneCaptureType","GainControl","Contrast","Saturation","Sharpness","DeviceSettingDescription","SubjectDistanceRange","ImageUniqueID","CameraOwnerName","BodySerialNumber","LensSpecification","LensMake","LensModel","LensSerialNumber","Gamma","GPSIFD","GPSVersionID","GPSLatitudeRef","GPSLatitude","GPSLongitudeRef","GPSLongitude","GPSAltitudeRef","GPSAltitude","GPSTimeStamp","GPSSatellites","GPSStatus","GPSMeasureMode","GPSDOP","GPSSpeedRef","GPSSpeed","GPSTrackRef","GPSTrack","GPSImgDirectionRef","GPSImgDirection","GPSMapDatum","GPSDestLatitudeRef","GPSDestLatitude","GPSDestLongitudeRef","GPSDestLongitude","GPSDestBearingRef","GPSDestBearing","GPSDestDistanceRef","GPSDestDistance","GPSProcessingMethod","GPSAreaInformation","GPSDateStamp","GPSDifferential","GPSHPositioningError","InteropIFD","InteroperabilityIndex","undefined","widthOriginal","heightOriginal","targetWidth","targetHeight","blendAlpha","interpolationPass","useWebWorker","resizeCallback","abs","colorChannels","returnedArray","targetWidthMultipliedByChannels","originalWidthMultipliedByChannels","originalHeightMultipliedByChannels","widthPassResultSize","finalResultSize","initialize","scripts","getElementsByTagName","paths","pop","sourceOfWorker","configureWorker","configurePasses","parentObj","Worker","substring","onmessage","heightBuffer","postMessage","error","resizeWidth","bypassResizer","ratioWeightWidthPass","initializeFirstPassBuffers","resizeWidthInterpolatedRGBA","resizeWidthInterpolatedRGB","resizeWidthRGBA","resizeWidthRGB","resizeHeight","ratioWeightHeightPass","initializeSecondPassBuffers","resizeHeightInterpolated","resizeHeightRGBA","resizeHeightRGB","ratioWeight","ratioWeightDivisor","weight","amountToNext","actualPosition","currentPosition","line","pixelOffset","outputOffset","nextLineOffsetOriginalWidth","nextLineOffsetTargetWidth","outputWidthWorkBench","outputBuffer","widthBuffer","finalOffset","firstWeight","secondWeight","targetPosition","interpolationWidthSourceReadStop","outputHeightWorkBench","round","pixelOffsetAccumulated","pixelOffsetAccumulated2","interpolationHeightSourceReadStop","BILINEARAlgo","generateFloatBuffer","generateUint8Buffer","bufferLength","Float32Array","Uint8Array"],"mappings":"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","file":"photo-resize.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['exports', './plugins/piexif', './plugins/resize'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('./plugins/piexif'), require('./plugins/resize'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.piexif, global.resize);\n        global.photoResize = mod.exports;\n    }\n})(this, function (exports, _piexif, _resize) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    var _piexif2 = _interopRequireDefault(_piexif);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    var PhotoResize = function () {\n        function PhotoResize(worker) {\n            _classCallCheck(this, PhotoResize);\n\n            // Workerを利用するかのフラグ\n            this.USE_WORKER = worker || true;\n        }\n\n        /** 指定のファイルを読み込む\n         * @param File file 読み込むファイル。fileタグなどで指定されたもの\n         * @param function callback 読み込みが完了したら呼び出すコールバック関数。引数として、読み込んだデータのDataURIを返す\n        */\n\n\n        _createClass(PhotoResize, [{\n            key: 'loadAndResize',\n            value: function loadAndResize(file, width, height, callback, isUp) {\n                var that = this;\n                var reader = new FileReader();\n                reader.onload = function (e) {\n                    that.resize(e.target.result, width, height, callback, isUp);\n                };\n                reader.readAsDataURL(file);\n            }\n        }, {\n            key: '_loadExif',\n            value: function _loadExif(data) {\n                this.exifObj = _piexif2.default.load(data);\n                return this.exifObj;\n            }\n        }, {\n            key: 'getImageSize',\n            value: function getImageSize(exifObj) {\n                var ret = [0, 0];\n                exifObj = exifObj || this.exifObj;\n\n                try {\n                    ret[0] = exifObj['0th'][_piexif2.default.ImageIFD.ImageWidth];\n                    ret[1] = exifObj['0th'][_piexif2.default.ImageIFD.ImageLength];\n                } catch (e) {\n                    try {\n                        ret[0] = exifObj['Exif'][_piexif2.default.ExifIFD.PixelXDimension];\n                        ret[1] = exifObj['Exif'][_piexif2.default.ExifIFD.PixelYDimension];\n                    } catch (ee) {\n                        return false;\n                    }\n                }\n\n                // 反転チェック\n                if (this.isSwapSide(exifObj)) {\n                    var temp = ret[0];\n                    ret[0] = ret[1];\n                    ret[1] = temp;\n                }\n                return ret;\n            }\n        }, {\n            key: 'isSwapSide',\n            value: function isSwapSide(exifObj) {\n                var ori = this.getOrientation(exifObj);\n                return ori >= 5;\n            }\n        }, {\n            key: '_JSImageResizer',\n            value: function _JSImageResizer(photo, origw, origh, dstw, dsth, callback) {\n                var resize = new _resize.Resize(origw, origh, dstw, dsth, true, true, this.USE_WORKER, callback);\n                resize.resize(photo);\n            }\n        }, {\n            key: 'resize',\n            value: function resize(photo, width, height, callback, isUp) {\n                var that = this;\n                var temp;\n                this._loadExif(photo);\n\n                // フラグ設定\n                isUp = isUp || false;\n\n                // 画像の縦横が異なる時、拡大、縮小先のx,yを入れ替える\n                if (this.isSwapSide()) {\n                    temp = width;\n                    width = height;\n                    height = temp;\n                }\n\n                // 処理する\n                var canvas = document.createElement('canvas');\n                var ctx = canvas.getContext('2d');\n                var image = new Image();\n                image.crossOrigin = \"Anonymous\";\n                image.onload = function (event) {\n                    var scale_w = 1;\n                    var scale_h = 1;\n                    var scale = 1;\n                    var scale_w_pixel = width;\n                    var scale_h_pixel = height;\n\n                    // 拡大率を算出\n                    scale_w = width / this.width;\n                    scale_h = height / this.height;\n\n                    // 小さい方を拡大、縮小率として採用する\n                    if (scale_w <= scale_h) {\n                        scale = scale_w;\n                        scale_w_pixel = width;\n                        scale_h_pixel = this.height * scale;\n                    } else {\n                        scale = scale_h;\n                        scale_w_pixel = this.width * scale;\n                        scale_h_pixel = height;\n                    }\n\n                    // 拡大の場合で、isUpがfalseであれば何もしない\n                    if (!isUp && scale >= 1) {\n                        callback(photo);\n                        return;\n                    }\n\n                    canvas.width = this.width;\n                    canvas.height = this.height;\n                    ctx.drawImage(this, 0, 0);\n                    that._JSImageResizer(ctx.getImageData(0, 0, this.width, this.height).data, this.width, this.height, scale_w_pixel, scale_h_pixel, function (buffer) {\n                        var tempcanvas = document.createElement('canvas');\n                        tempcanvas.width = scale_w_pixel;\n                        tempcanvas.height = scale_h_pixel;\n                        var tempcontext = tempcanvas.getContext('2d');\n                        that._updateCanvas(tempcontext, tempcontext.createImageData(scale_w_pixel, scale_h_pixel), buffer);\n\n                        // exifを更新して返す\n                        callback(that._setSize(that.exifObj, tempcanvas.toDataURL('image/jpeg'), scale_w_pixel, scale_h_pixel));\n                    });\n                };\n                image.src = photo;\n            }\n        }, {\n            key: '_setSize',\n            value: function _setSize(beforeexif, data, width, height) {\n                beforeexif['0th'][_piexif2.default.ImageIFD.ImageWidth] = width;\n                beforeexif['0th'][_piexif2.default.ImageIFD.ImageLength] = height;\n                beforeexif['Exif'][_piexif2.default.ExifIFD.PixelXDimension] = width;\n                beforeexif['Exif'][_piexif2.default.ExifIFD.PixelYDimension] = height;\n                var exifStr = _piexif2.default.dump(beforeexif);\n                return _piexif2.default.insert(exifStr, data);\n            }\n        }, {\n            key: '_updateCanvas',\n            value: function _updateCanvas(contextHandlePassed, imageBuffer, frameBuffer) {\n                var data = imageBuffer.data;\n                var length = data.length;\n                for (var x = 0; x < length; ++x) {\n                    data[x] = frameBuffer[x] & 0xFF;\n                }\n                contextHandlePassed.putImageData(imageBuffer, 0, 0);\n            }\n        }, {\n            key: 'getOrientation',\n            value: function getOrientation(exifObj) {\n                exifObj = exifObj || this.exifObj;\n                return exifObj['0th'][_piexif2.default.ImageIFD.Orientation] || 1;\n            }\n        }, {\n            key: 'exifHTML',\n            value: function exifHTML(exifObj) {\n                exifObj = exifObj || this.exifObj;\n                var output = \"\";\n                for (var ifd in exifObj) {\n                    if (ifd == \"thumbnail\") {\n                        continue;\n                    }\n                    output += \"-\" + ifd + \"<br>\";\n                    for (var tag in exifObj[ifd]) {\n                        output += \"  \" + _piexif2.default.TAGS[ifd][tag][\"name\"] + \":\" + exifObj[ifd][tag] + \"<br>\";\n                    }\n                }\n\n                return output;\n            }\n        }], [{\n            key: 'convDataURL2Binary',\n            value: function convDataURL2Binary(data) {\n                if (!data.startsWith('data:image/')) {\n                    return false;\n                }\n\n                var datas = data.split(',');\n                return window.atob(datas[1]);\n            }\n        }]);\n\n        return PhotoResize;\n    }();\n\n    exports.default = PhotoResize;\n\n    if (typeof window != \"undefined\") {\n        !window.PhotoResize && (window.PhotoResize = PhotoResize);\n    }\n});\n\n},{\"./plugins/piexif\":2,\"./plugins/resize\":3}],2:[function(require,module,exports){\n(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"module\", \"exports\"], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(module, exports);\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod, mod.exports);\n        global.piexif = mod.exports;\n    }\n})(this, function (module, exports) {\n    \"use strict\";\n\n    /* piexifjs\n    \n    The MIT License (MIT)\n    \n    Copyright (c) 2014, 2015 hMatoba(https://github.com/hMatoba)\n    \n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n    \n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n    \n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n    */\n\n    (function () {\n        \"use strict\";\n\n        var that = {};\n\n        that.remove = function (jpeg) {\n            var b64 = false;\n            if (jpeg.slice(0, 2) == \"\\xff\\xd8\") {} else if (jpeg.slice(0, 23) == \"data:image/jpeg;base64,\" || jpeg.slice(0, 22) == \"data:image/jpg;base64,\") {\n                jpeg = atob(jpeg.split(\",\")[1]);\n                b64 = true;\n            } else {\n                throw \"Given data is not jpeg.\";\n            }\n\n            var segments = splitIntoSegments(jpeg);\n            if (segments[1].slice(0, 2) == \"\\xff\\xe1\" && segments[1].slice(4, 10) == \"Exif\\x00\\x00\") {\n                segments = [segments[0]].concat(segments.slice(2));\n            } else if (segments[2].slice(0, 2) == \"\\xff\\xe1\" && segments[2].slice(4, 10) == \"Exif\\x00\\x00\") {\n                segments = segments.slice(0, 2).concat(segments.slice(3));\n            } else {\n                throw \"Exif not found.\";\n            }\n\n            var new_data = segments.join(\"\");\n            if (b64) {\n                new_data = \"data:image/jpeg;base64,\" + btoa(new_data);\n            }\n\n            return new_data;\n        };\n\n        that.insert = function (exif, jpeg) {\n            var b64 = false;\n            if (exif.slice(0, 6) != \"\\x45\\x78\\x69\\x66\\x00\\x00\") {\n                throw \"Given data is not exif.\";\n            }\n            if (jpeg.slice(0, 2) == \"\\xff\\xd8\") {} else if (jpeg.slice(0, 23) == \"data:image/jpeg;base64,\" || jpeg.slice(0, 22) == \"data:image/jpg;base64,\") {\n                jpeg = atob(jpeg.split(\",\")[1]);\n                b64 = true;\n            } else {\n                throw \"Given data is not jpeg.\";\n            }\n\n            var exifStr = \"\\xff\\xe1\" + pack(\">H\", [exif.length + 2]) + exif;\n            var segments = splitIntoSegments(jpeg);\n            var new_data = mergeSegments(segments, exifStr);\n            if (b64) {\n                new_data = \"data:image/jpeg;base64,\" + btoa(new_data);\n            }\n\n            return new_data;\n        };\n\n        that.load = function (data) {\n            var input_data;\n            if (typeof data == \"string\") {\n                if (data.slice(0, 2) == \"\\xff\\xd8\") {\n                    input_data = data;\n                } else if (data.slice(0, 23) == \"data:image/jpeg;base64,\" || data.slice(0, 22) == \"data:image/jpeg;base64,\") {\n                    input_data = atob(data.split(\",\")[1]);\n                } else if (data.slice(0, 4) == \"Exif\") {\n                    input_data = data.slice(6);\n                } else {\n                    throw \"'load' gots invalid file data.\";\n                }\n            } else {\n                throw \"'load' gots invalid type argument.\";\n            }\n\n            var exifDict = {};\n            var exif_dict = {\n                \"0th\": {},\n                \"Exif\": {},\n                \"GPS\": {},\n                \"Interop\": {},\n                \"1st\": {},\n                \"thumbnail\": null\n            };\n            var exifReader = new ExifReader(input_data);\n            if (exifReader.tiftag === null) {\n                return exif_dict;\n            }\n\n            if (exifReader.tiftag.slice(0, 2) == \"\\x49\\x49\") {\n                exifReader.endian_mark = \"<\";\n            } else {\n                exifReader.endian_mark = \">\";\n            }\n\n            var pointer = unpack(exifReader.endian_mark + \"L\", exifReader.tiftag.slice(4, 8))[0];\n            exif_dict[\"0th\"] = exifReader.get_ifd(pointer, \"0th\");\n\n            var first_ifd_pointer = exif_dict[\"0th\"][\"first_ifd_pointer\"];\n            delete exif_dict[\"0th\"][\"first_ifd_pointer\"];\n\n            if (34665 in exif_dict[\"0th\"]) {\n                pointer = exif_dict[\"0th\"][34665];\n                exif_dict[\"Exif\"] = exifReader.get_ifd(pointer, \"Exif\");\n            }\n            if (34853 in exif_dict[\"0th\"]) {\n                pointer = exif_dict[\"0th\"][34853];\n                exif_dict[\"GPS\"] = exifReader.get_ifd(pointer, \"GPS\");\n            }\n            if (40965 in exif_dict[\"Exif\"]) {\n                pointer = exif_dict[\"Exif\"][40965];\n                exif_dict[\"Interop\"] = exifReader.get_ifd(pointer, \"Interop\");\n            }\n            if (first_ifd_pointer != \"\\x00\\x00\\x00\\x00\") {\n                pointer = unpack(exifReader.endian_mark + \"L\", first_ifd_pointer)[0];\n                exif_dict[\"1st\"] = exifReader.get_ifd(pointer, \"1st\");\n                if (513 in exif_dict[\"1st\"] && 514 in exif_dict[\"1st\"]) {\n                    var end = exif_dict[\"1st\"][513] + exif_dict[\"1st\"][514];\n                    var thumb = exifReader.tiftag.slice(exif_dict[\"1st\"][513], end);\n                    exif_dict[\"thumbnail\"] = thumb;\n                }\n            }\n\n            return exif_dict;\n        };\n\n        that.dump = function (exif_dict_original) {\n            var TIFF_HEADER_LENGTH = 8;\n\n            var exif_dict = copy(exif_dict_original);\n            var header = \"Exif\\x00\\x00\\x4d\\x4d\\x00\\x2a\\x00\\x00\\x00\\x08\";\n            var exif_is = false;\n            var gps_is = false;\n            var interop_is = false;\n            var first_is = false;\n\n            var zeroth_ifd, exif_ifd, interop_ifd, gps_ifd, first_ifd;\n            if (\"0th\" in exif_dict) {\n                zeroth_ifd = exif_dict[\"0th\"];\n            } else {\n                zeroth_ifd = {};\n            }\n            if (\"Exif\" in exif_dict && Object.keys(exif_dict[\"Exif\"]).length || \"Interop\" in exif_dict && Object.keys(exif_dict[\"Interop\"]).length) {\n                zeroth_ifd[34665] = 1;\n                exif_is = true;\n                exif_ifd = exif_dict[\"Exif\"];\n                if (\"Interop\" in exif_dict && Object.keys(exif_dict[\"Interop\"]).length) {\n                    exif_ifd[40965] = 1;\n                    interop_is = true;\n                    interop_ifd = exif_dict[\"Interop\"];\n                }\n            }\n            if (\"GPS\" in exif_dict && Object.keys(exif_dict[\"GPS\"]).length) {\n                zeroth_ifd[34853] = 1;\n                gps_is = true;\n                gps_ifd = exif_dict[\"GPS\"];\n            }\n            if (\"1st\" in exif_dict && \"thumbnail\" in exif_dict && exif_dict[\"thumbnail\"] != null) {\n                first_is = true;\n                exif_dict[\"1st\"][513] = 1;\n                exif_dict[\"1st\"][514] = 1;\n                first_ifd = exif_dict[\"1st\"];\n            }\n\n            var zeroth_set = _dict_to_bytes(zeroth_ifd, \"0th\", 0);\n            var zeroth_length = zeroth_set[0].length + exif_is * 12 + gps_is * 12 + 4 + zeroth_set[1].length;\n\n            var exif_set,\n                exif_bytes = \"\",\n                exif_length = 0,\n                gps_set,\n                gps_bytes = \"\",\n                gps_length = 0,\n                interop_set,\n                interop_bytes = \"\",\n                interop_length = 0,\n                first_set,\n                first_bytes = \"\",\n                thumbnail;\n            if (exif_is) {\n                exif_set = _dict_to_bytes(exif_ifd, \"Exif\", zeroth_length);\n                exif_length = exif_set[0].length + interop_is * 12 + exif_set[1].length;\n            }\n            if (gps_is) {\n                gps_set = _dict_to_bytes(gps_ifd, \"GPS\", zeroth_length + exif_length);\n                gps_bytes = gps_set.join(\"\");\n                gps_length = gps_bytes.length;\n            }\n            if (interop_is) {\n                var offset = zeroth_length + exif_length + gps_length;\n                interop_set = _dict_to_bytes(interop_ifd, \"Interop\", offset);\n                interop_bytes = interop_set.join(\"\");\n                interop_length = interop_bytes.length;\n            }\n            if (first_is) {\n                var offset = zeroth_length + exif_length + gps_length + interop_length;\n                first_set = _dict_to_bytes(first_ifd, \"1st\", offset);\n                thumbnail = _get_thumbnail(exif_dict[\"thumbnail\"]);\n                if (thumbnail.length > 64000) {\n                    throw \"Given thumbnail is too large. max 64kB\";\n                }\n            }\n\n            var exif_pointer = \"\",\n                gps_pointer = \"\",\n                interop_pointer = \"\",\n                first_ifd_pointer = \"\\x00\\x00\\x00\\x00\";\n            if (exif_is) {\n                var pointer_value = TIFF_HEADER_LENGTH + zeroth_length;\n                var pointer_str = pack(\">L\", [pointer_value]);\n                var key = 34665;\n                var key_str = pack(\">H\", [key]);\n                var type_str = pack(\">H\", [TYPES[\"Long\"]]);\n                var length_str = pack(\">L\", [1]);\n                exif_pointer = key_str + type_str + length_str + pointer_str;\n            }\n            if (gps_is) {\n                var pointer_value = TIFF_HEADER_LENGTH + zeroth_length + exif_length;\n                var pointer_str = pack(\">L\", [pointer_value]);\n                var key = 34853;\n                var key_str = pack(\">H\", [key]);\n                var type_str = pack(\">H\", [TYPES[\"Long\"]]);\n                var length_str = pack(\">L\", [1]);\n                gps_pointer = key_str + type_str + length_str + pointer_str;\n            }\n            if (interop_is) {\n                var pointer_value = TIFF_HEADER_LENGTH + zeroth_length + exif_length + gps_length;\n                var pointer_str = pack(\">L\", [pointer_value]);\n                var key = 40965;\n                var key_str = pack(\">H\", [key]);\n                var type_str = pack(\">H\", [TYPES[\"Long\"]]);\n                var length_str = pack(\">L\", [1]);\n                interop_pointer = key_str + type_str + length_str + pointer_str;\n            }\n            if (first_is) {\n                var pointer_value = TIFF_HEADER_LENGTH + zeroth_length + exif_length + gps_length + interop_length;\n                first_ifd_pointer = pack(\">L\", [pointer_value]);\n                var thumbnail_pointer = pointer_value + first_set[0].length + 24 + 4 + first_set[1].length;\n                var thumbnail_p_bytes = \"\\x02\\x01\\x00\\x04\\x00\\x00\\x00\\x01\" + pack(\">L\", [thumbnail_pointer]);\n                var thumbnail_length_bytes = \"\\x02\\x02\\x00\\x04\\x00\\x00\\x00\\x01\" + pack(\">L\", [thumbnail.length]);\n                first_bytes = first_set[0] + thumbnail_p_bytes + thumbnail_length_bytes + \"\\x00\\x00\\x00\\x00\" + first_set[1] + thumbnail;\n            }\n\n            var zeroth_bytes = zeroth_set[0] + exif_pointer + gps_pointer + first_ifd_pointer + zeroth_set[1];\n            if (exif_is) {\n                exif_bytes = exif_set[0] + interop_pointer + exif_set[1];\n            }\n\n            return header + zeroth_bytes + exif_bytes + gps_bytes + interop_bytes + first_bytes;\n        };\n\n        function copy(obj) {\n            return JSON.parse(JSON.stringify(obj));\n        }\n\n        function _get_thumbnail(jpeg) {\n            var segments = splitIntoSegments(jpeg);\n            while (\"\\xff\\xe0\" <= segments[1].slice(0, 2) && segments[1].slice(0, 2) <= \"\\xff\\xef\") {\n                segments = [segments[0]].concat(segments.slice(2));\n            }\n            return segments.join(\"\");\n        }\n\n        function _pack_byte(array) {\n            return pack(\">\" + nStr(\"B\", array.length), array);\n        }\n\n        function _pack_short(array) {\n            return pack(\">\" + nStr(\"H\", array.length), array);\n        }\n\n        function _pack_long(array) {\n            return pack(\">\" + nStr(\"L\", array.length), array);\n        }\n\n        function _value_to_bytes(raw_value, value_type, offset) {\n            var four_bytes_over = \"\";\n            var value_str = \"\";\n            var length, new_value, num, den;\n\n            if (value_type == \"Byte\") {\n                length = raw_value.length;\n                if (length <= 4) {\n                    value_str = _pack_byte(raw_value) + nStr(\"\\x00\", 4 - length);\n                } else {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = _pack_byte(raw_value);\n                }\n            } else if (value_type == \"Short\") {\n                length = raw_value.length;\n                if (length <= 2) {\n                    value_str = _pack_short(raw_value) + nStr(\"\\x00\\x00\", 2 - length);\n                } else {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = _pack_short(raw_value);\n                }\n            } else if (value_type == \"Long\") {\n                length = raw_value.length;\n                if (length <= 1) {\n                    value_str = _pack_long(raw_value);\n                } else {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = _pack_long(raw_value);\n                }\n            } else if (value_type == \"Ascii\") {\n                new_value = raw_value + \"\\x00\";\n                length = new_value.length;\n                if (length > 4) {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = new_value;\n                } else {\n                    value_str = new_value + nStr(\"\\x00\", 4 - length);\n                }\n            } else if (value_type == \"Rational\") {\n                if (typeof raw_value[0] == \"number\") {\n                    length = 1;\n                    num = raw_value[0];\n                    den = raw_value[1];\n                    new_value = pack(\">L\", [num]) + pack(\">L\", [den]);\n                } else {\n                    length = raw_value.length;\n                    new_value = \"\";\n                    for (var n = 0; n < length; n++) {\n                        num = raw_value[n][0];\n                        den = raw_value[n][1];\n                        new_value += pack(\">L\", [num]) + pack(\">L\", [den]);\n                    }\n                }\n                value_str = pack(\">L\", [offset]);\n                four_bytes_over = new_value;\n            } else if (value_type == \"SRational\") {\n                if (typeof raw_value[0] == \"number\") {\n                    length = 1;\n                    num = raw_value[0];\n                    den = raw_value[1];\n                    new_value = pack(\">l\", [num]) + pack(\">l\", [den]);\n                } else {\n                    length = raw_value.length;\n                    new_value = \"\";\n                    for (var n = 0; n < length; n++) {\n                        num = raw_value[n][0];\n                        den = raw_value[n][1];\n                        new_value += pack(\">l\", [num]) + pack(\">l\", [den]);\n                    }\n                }\n                value_str = pack(\">L\", [offset]);\n                four_bytes_over = new_value;\n            } else if (value_type == \"Undefined\") {\n                length = raw_value.length;\n                if (length > 4) {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = raw_value;\n                } else {\n                    value_str = raw_value + nStr(\"\\x00\", 4 - length);\n                }\n            }\n\n            var length_str = pack(\">L\", [length]);\n\n            return [length_str, value_str, four_bytes_over];\n        }\n\n        function _dict_to_bytes(ifd_dict, ifd, ifd_offset) {\n            var TIFF_HEADER_LENGTH = 8;\n            var tag_count = Object.keys(ifd_dict).length;\n            var entry_header = pack(\">H\", [tag_count]);\n            var entries_length;\n            if ([\"0th\", \"1st\"].indexOf(ifd) > -1) {\n                entries_length = 2 + tag_count * 12 + 4;\n            } else {\n                entries_length = 2 + tag_count * 12;\n            }\n            var entries = \"\";\n            var values = \"\";\n            var key;\n\n            for (var key in ifd_dict) {\n                if (typeof key == \"string\") {\n                    key = parseInt(key);\n                }\n                if (ifd == \"0th\" && [34665, 34853].indexOf(key) > -1) {\n                    continue;\n                } else if (ifd == \"Exif\" && key == 40965) {\n                    continue;\n                } else if (ifd == \"1st\" && [513, 514].indexOf(key) > -1) {\n                    continue;\n                }\n\n                var raw_value = ifd_dict[key];\n                var key_str = pack(\">H\", [key]);\n                var value_type = TAGS[ifd][key][\"type\"];\n                var type_str = pack(\">H\", [TYPES[value_type]]);\n\n                if (typeof raw_value == \"number\") {\n                    raw_value = [raw_value];\n                }\n                var offset = TIFF_HEADER_LENGTH + entries_length + ifd_offset + values.length;\n                var b = _value_to_bytes(raw_value, value_type, offset);\n                var length_str = b[0];\n                var value_str = b[1];\n                var four_bytes_over = b[2];\n\n                entries += key_str + type_str + length_str + value_str;\n                values += four_bytes_over;\n            }\n\n            return [entry_header + entries, values];\n        }\n\n        function ExifReader(data) {\n            var segments, app1;\n            if (data.slice(0, 2) == \"\\xff\\xd8\") {\n                // JPEG\n                segments = splitIntoSegments(data);\n                app1 = getExifSeg(segments);\n                if (app1) {\n                    this.tiftag = app1.slice(10);\n                } else {\n                    this.tiftag = null;\n                }\n            } else if ([\"\\x49\\x49\", \"\\x4d\\x4d\"].indexOf(data.slice(0, 2)) > -1) {\n                // TIFF\n                this.tiftag = data;\n            } else if (data.slice(0, 4) == \"Exif\") {\n                // Exif\n                this.tiftag = data.slice(6);\n            } else {\n                throw \"Given file is neither JPEG nor TIFF.\";\n            }\n        }\n\n        ExifReader.prototype = {\n            get_ifd: function get_ifd(pointer, ifd_name) {\n                var ifd_dict = {};\n                var tag_count = unpack(this.endian_mark + \"H\", this.tiftag.slice(pointer, pointer + 2))[0];\n                var offset = pointer + 2;\n                var t;\n                if ([\"0th\", \"1st\"].indexOf(ifd_name) > -1) {\n                    t = \"Image\";\n                } else {\n                    t = ifd_name;\n                }\n\n                for (var x = 0; x < tag_count; x++) {\n                    pointer = offset + 12 * x;\n                    var tag = unpack(this.endian_mark + \"H\", this.tiftag.slice(pointer, pointer + 2))[0];\n                    var value_type = unpack(this.endian_mark + \"H\", this.tiftag.slice(pointer + 2, pointer + 4))[0];\n                    var value_num = unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer + 4, pointer + 8))[0];\n                    var value = this.tiftag.slice(pointer + 8, pointer + 12);\n\n                    var v_set = [value_type, value_num, value];\n                    if (tag in TAGS[t]) {\n                        ifd_dict[tag] = this.convert_value(v_set);\n                    }\n                }\n\n                if (ifd_name == \"0th\") {\n                    pointer = offset + 12 * tag_count;\n                    ifd_dict[\"first_ifd_pointer\"] = this.tiftag.slice(pointer, pointer + 4);\n                }\n\n                return ifd_dict;\n            },\n\n            convert_value: function convert_value(val) {\n                var data = null;\n                var t = val[0];\n                var length = val[1];\n                var value = val[2];\n                var pointer;\n\n                if (t == 1) {\n                    // BYTE\n                    if (length > 4) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = unpack(this.endian_mark + nStr(\"B\", length), this.tiftag.slice(pointer, pointer + length));\n                    } else {\n                        data = unpack(this.endian_mark + nStr(\"B\", length), value.slice(0, length));\n                    }\n                } else if (t == 2) {\n                    // ASCII\n                    if (length > 4) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = this.tiftag.slice(pointer, pointer + length - 1);\n                    } else {\n                        data = value.slice(0, length - 1);\n                    }\n                } else if (t == 3) {\n                    // SHORT\n                    if (length > 2) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = unpack(this.endian_mark + nStr(\"H\", length), this.tiftag.slice(pointer, pointer + length * 2));\n                    } else {\n                        data = unpack(this.endian_mark + nStr(\"H\", length), value.slice(0, length * 2));\n                    }\n                } else if (t == 4) {\n                    // LONG\n                    if (length > 1) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = unpack(this.endian_mark + nStr(\"L\", length), this.tiftag.slice(pointer, pointer + length * 4));\n                    } else {\n                        data = unpack(this.endian_mark + nStr(\"L\", length), value);\n                    }\n                } else if (t == 5) {\n                    // RATIONAL\n                    pointer = unpack(this.endian_mark + \"L\", value)[0];\n                    if (length > 1) {\n                        data = [];\n                        for (var x = 0; x < length; x++) {\n                            data.push([unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer + x * 8, pointer + 4 + x * 8))[0], unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer + 4 + x * 8, pointer + 8 + x * 8))[0]]);\n                        }\n                    } else {\n                        data = [unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer, pointer + 4))[0], unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer + 4, pointer + 8))[0]];\n                    }\n                } else if (t == 7) {\n                    // UNDEFINED BYTES\n                    if (length > 4) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = this.tiftag.slice(pointer, pointer + length);\n                    } else {\n                        data = value.slice(0, length);\n                    }\n                } else if (t == 10) {\n                    // SRATIONAL\n                    pointer = unpack(this.endian_mark + \"L\", value)[0];\n                    if (length > 1) {\n                        data = [];\n                        for (var x = 0; x < length; x++) {\n                            data.push([unpack(this.endian_mark + \"l\", this.tiftag.slice(pointer + x * 8, pointer + 4 + x * 8))[0], unpack(this.endian_mark + \"l\", this.tiftag.slice(pointer + 4 + x * 8, pointer + 8 + x * 8))[0]]);\n                        }\n                    } else {\n                        data = [unpack(this.endian_mark + \"l\", this.tiftag.slice(pointer, pointer + 4))[0], unpack(this.endian_mark + \"l\", this.tiftag.slice(pointer + 4, pointer + 8))[0]];\n                    }\n                } else {\n                    throw \"Exif might be wrong. Got incorrect value \" + \"type to decode. type:\" + t;\n                }\n\n                if (data instanceof Array && data.length == 1) {\n                    return data[0];\n                } else {\n                    return data;\n                }\n            }\n        };\n\n        if (typeof btoa === \"undefined\") {\n            var btoa = function btoa(input) {\n                var output = \"\";\n                var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n                var i = 0;\n                var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n                while (i < input.length) {\n\n                    chr1 = input.charCodeAt(i++);\n                    chr2 = input.charCodeAt(i++);\n                    chr3 = input.charCodeAt(i++);\n\n                    enc1 = chr1 >> 2;\n                    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n                    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n                    enc4 = chr3 & 63;\n\n                    if (isNaN(chr2)) {\n                        enc3 = enc4 = 64;\n                    } else if (isNaN(chr3)) {\n                        enc4 = 64;\n                    }\n\n                    output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n                }\n\n                return output;\n            };\n        }\n\n        if (typeof atob === \"undefined\") {\n            var atob = function atob(input) {\n                var output = \"\";\n                var chr1, chr2, chr3;\n                var enc1, enc2, enc3, enc4;\n                var i = 0;\n                var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n                input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n                while (i < input.length) {\n\n                    enc1 = keyStr.indexOf(input.charAt(i++));\n                    enc2 = keyStr.indexOf(input.charAt(i++));\n                    enc3 = keyStr.indexOf(input.charAt(i++));\n                    enc4 = keyStr.indexOf(input.charAt(i++));\n\n                    chr1 = enc1 << 2 | enc2 >> 4;\n                    chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n                    chr3 = (enc3 & 3) << 6 | enc4;\n\n                    output = output + String.fromCharCode(chr1);\n\n                    if (enc3 != 64) {\n                        output = output + String.fromCharCode(chr2);\n                    }\n                    if (enc4 != 64) {\n                        output = output + String.fromCharCode(chr3);\n                    }\n                }\n\n                return output;\n            };\n        }\n\n        function getImageSize(imageArray) {\n            var segments = slice2Segments(imageArray);\n            var seg,\n                width,\n                height,\n                SOF = [192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 205, 206, 207];\n\n            for (var x = 0; x < segments.length; x++) {\n                seg = segments[x];\n                if (SOF.indexOf(seg[1]) >= 0) {\n                    height = seg[5] * 256 + seg[6];\n                    width = seg[7] * 256 + seg[8];\n                    break;\n                }\n            }\n            return [width, height];\n        }\n\n        function pack(mark, array) {\n            if (!(array instanceof Array)) {\n                throw \"'pack' error. Got invalid type argument.\";\n            }\n            if (mark.length - 1 != array.length) {\n                throw \"'pack' error. \" + (mark.length - 1) + \" marks, \" + array.length + \" elements.\";\n            }\n\n            var littleEndian;\n            if (mark[0] == \"<\") {\n                littleEndian = true;\n            } else if (mark[0] == \">\") {\n                littleEndian = false;\n            } else {\n                throw \"\";\n            }\n            var packed = \"\";\n            var p = 1;\n            var val = null;\n            var c = null;\n            var valStr = null;\n\n            while (c = mark[p]) {\n                if (c.toLowerCase() == \"b\") {\n                    val = array[p - 1];\n                    if (c == \"b\" && val < 0) {\n                        val += 0x100;\n                    }\n                    if (val > 0xff || val < 0) {\n                        throw \"'pack' error.\";\n                    } else {\n                        valStr = String.fromCharCode(val);\n                    }\n                } else if (c == \"H\") {\n                    val = array[p - 1];\n                    if (val > 0xffff || val < 0) {\n                        throw \"'pack' error.\";\n                    } else {\n                        valStr = String.fromCharCode(Math.floor(val % 0x10000 / 0x100)) + String.fromCharCode(val % 0x100);\n                        if (littleEndian) {\n                            valStr = valStr.split(\"\").reverse().join(\"\");\n                        }\n                    }\n                } else if (c.toLowerCase() == \"l\") {\n                    val = array[p - 1];\n                    if (c == \"l\" && val < 0) {\n                        val += 0x100000000;\n                    }\n                    if (val > 0xffffffff || val < 0) {\n                        throw \"'pack' error.\";\n                    } else {\n                        valStr = String.fromCharCode(Math.floor(val / 0x1000000)) + String.fromCharCode(Math.floor(val % 0x1000000 / 0x10000)) + String.fromCharCode(Math.floor(val % 0x10000 / 0x100)) + String.fromCharCode(val % 0x100);\n                        if (littleEndian) {\n                            valStr = valStr.split(\"\").reverse().join(\"\");\n                        }\n                    }\n                } else {\n                    throw \"'pack' error.\";\n                }\n\n                packed += valStr;\n                p += 1;\n            }\n\n            return packed;\n        }\n\n        function unpack(mark, str) {\n            if (typeof str != \"string\") {\n                throw \"'unpack' error. Got invalid type argument.\";\n            }\n            var l = 0;\n            for (var markPointer = 1; markPointer < mark.length; markPointer++) {\n                if (mark[markPointer].toLowerCase() == \"b\") {\n                    l += 1;\n                } else if (mark[markPointer].toLowerCase() == \"h\") {\n                    l += 2;\n                } else if (mark[markPointer].toLowerCase() == \"l\") {\n                    l += 4;\n                } else {\n                    throw \"'unpack' error. Got invalid mark.\";\n                }\n            }\n\n            if (l != str.length) {\n                throw \"'unpack' error. Mismatch between symbol and string length. \" + l + \":\" + str.length;\n            }\n\n            var littleEndian;\n            if (mark[0] == \"<\") {\n                littleEndian = true;\n            } else if (mark[0] == \">\") {\n                littleEndian = false;\n            } else {\n                throw \"'unpack' error.\";\n            }\n            var unpacked = [];\n            var strPointer = 0;\n            var p = 1;\n            var val = null;\n            var c = null;\n            var length = null;\n            var sliced = \"\";\n\n            while (c = mark[p]) {\n                if (c.toLowerCase() == \"b\") {\n                    length = 1;\n                    sliced = str.slice(strPointer, strPointer + length);\n                    val = sliced.charCodeAt(0);\n                    if (c == \"b\" && val >= 0x80) {\n                        val -= 0x100;\n                    }\n                } else if (c == \"H\") {\n                    length = 2;\n                    sliced = str.slice(strPointer, strPointer + length);\n                    if (littleEndian) {\n                        sliced = sliced.split(\"\").reverse().join(\"\");\n                    }\n                    val = sliced.charCodeAt(0) * 0x100 + sliced.charCodeAt(1);\n                } else if (c.toLowerCase() == \"l\") {\n                    length = 4;\n                    sliced = str.slice(strPointer, strPointer + length);\n                    if (littleEndian) {\n                        sliced = sliced.split(\"\").reverse().join(\"\");\n                    }\n                    val = sliced.charCodeAt(0) * 0x1000000 + sliced.charCodeAt(1) * 0x10000 + sliced.charCodeAt(2) * 0x100 + sliced.charCodeAt(3);\n                    if (c == \"l\" && val >= 0x80000000) {\n                        val -= 0x100000000;\n                    }\n                } else {\n                    throw \"'unpack' error. \" + c;\n                }\n\n                unpacked.push(val);\n                strPointer += length;\n                p += 1;\n            }\n\n            return unpacked;\n        }\n\n        function nStr(ch, num) {\n            var str = \"\";\n            for (var i = 0; i < num; i++) {\n                str += ch;\n            }\n            return str;\n        }\n\n        function splitIntoSegments(data) {\n            if (data.slice(0, 2) != \"\\xff\\xd8\") {\n                throw \"Given data isn't JPEG.\";\n            }\n\n            var head = 2;\n            var segments = [\"\\xff\\xd8\"];\n            while (true) {\n                if (data.slice(head, head + 2) == \"\\xff\\xda\") {\n                    segments.push(data.slice(head));\n                    break;\n                } else {\n                    var length = unpack(\">H\", data.slice(head + 2, head + 4))[0];\n                    var endPoint = head + length + 2;\n                    segments.push(data.slice(head, endPoint));\n                    head = endPoint;\n                }\n\n                if (head >= data.length) {\n                    throw \"Wrong JPEG data.\";\n                }\n            }\n            return segments;\n        }\n\n        function getExifSeg(segments) {\n            var seg;\n            for (var i = 0; i < segments.length; i++) {\n                seg = segments[i];\n                if (seg.slice(0, 2) == \"\\xff\\xe1\" && seg.slice(4, 10) == \"Exif\\x00\\x00\") {\n                    return seg;\n                }\n            }\n            return null;\n        }\n\n        function mergeSegments(segments, exif) {\n\n            if (segments[1].slice(0, 2) == \"\\xff\\xe0\" && segments[2].slice(0, 2) == \"\\xff\\xe1\" && segments[2].slice(4, 10) == \"Exif\\x00\\x00\") {\n                if (exif) {\n                    segments[2] = exif;\n                    segments = [\"\\xff\\xd8\"].concat(segments.slice(2));\n                } else if (exif == null) {\n                    segments = segments.slice(0, 2).concat(segments.slice(3));\n                } else {\n                    segments = segments.slice(0).concat(segments.slice(2));\n                }\n            } else if (segments[1].slice(0, 2) == \"\\xff\\xe0\") {\n                if (exif) {\n                    segments[1] = exif;\n                }\n            } else if (segments[1].slice(0, 2) == \"\\xff\\xe1\" && segments[1].slice(4, 10) == \"Exif\\x00\\x00\") {\n                if (exif) {\n                    segments[1] = exif;\n                } else if (exif == null) {\n                    segments = segments.slice(0).concat(segments.slice(2));\n                }\n            } else {\n                if (exif) {\n                    segments = [segments[0], exif].concat(segments.slice(1));\n                }\n            }\n\n            return segments.join(\"\");\n        }\n\n        function toHex(str) {\n            var hexStr = \"\";\n            for (var i = 0; i < str.length; i++) {\n                var h = str.charCodeAt(i);\n                var hex = (h < 10 ? \"0\" : \"\") + h.toString(16);\n                hexStr += hex + \" \";\n            }\n            return hexStr;\n        }\n\n        var TYPES = {\n            \"Byte\": 1,\n            \"Ascii\": 2,\n            \"Short\": 3,\n            \"Long\": 4,\n            \"Rational\": 5,\n            \"Undefined\": 7,\n            \"SLong\": 9,\n            \"SRational\": 10\n        };\n\n        var TAGS = {\n            'Image': {\n                11: {\n                    'name': 'ProcessingSoftware',\n                    'type': 'Ascii'\n                },\n                254: {\n                    'name': 'NewSubfileType',\n                    'type': 'Long'\n                },\n                255: {\n                    'name': 'SubfileType',\n                    'type': 'Short'\n                },\n                256: {\n                    'name': 'ImageWidth',\n                    'type': 'Long'\n                },\n                257: {\n                    'name': 'ImageLength',\n                    'type': 'Long'\n                },\n                258: {\n                    'name': 'BitsPerSample',\n                    'type': 'Short'\n                },\n                259: {\n                    'name': 'Compression',\n                    'type': 'Short'\n                },\n                262: {\n                    'name': 'PhotometricInterpretation',\n                    'type': 'Short'\n                },\n                263: {\n                    'name': 'Threshholding',\n                    'type': 'Short'\n                },\n                264: {\n                    'name': 'CellWidth',\n                    'type': 'Short'\n                },\n                265: {\n                    'name': 'CellLength',\n                    'type': 'Short'\n                },\n                266: {\n                    'name': 'FillOrder',\n                    'type': 'Short'\n                },\n                269: {\n                    'name': 'DocumentName',\n                    'type': 'Ascii'\n                },\n                270: {\n                    'name': 'ImageDescription',\n                    'type': 'Ascii'\n                },\n                271: {\n                    'name': 'Make',\n                    'type': 'Ascii'\n                },\n                272: {\n                    'name': 'Model',\n                    'type': 'Ascii'\n                },\n                273: {\n                    'name': 'StripOffsets',\n                    'type': 'Long'\n                },\n                274: {\n                    'name': 'Orientation',\n                    'type': 'Short'\n                },\n                277: {\n                    'name': 'SamplesPerPixel',\n                    'type': 'Short'\n                },\n                278: {\n                    'name': 'RowsPerStrip',\n                    'type': 'Long'\n                },\n                279: {\n                    'name': 'StripByteCounts',\n                    'type': 'Long'\n                },\n                282: {\n                    'name': 'XResolution',\n                    'type': 'Rational'\n                },\n                283: {\n                    'name': 'YResolution',\n                    'type': 'Rational'\n                },\n                284: {\n                    'name': 'PlanarConfiguration',\n                    'type': 'Short'\n                },\n                290: {\n                    'name': 'GrayResponseUnit',\n                    'type': 'Short'\n                },\n                291: {\n                    'name': 'GrayResponseCurve',\n                    'type': 'Short'\n                },\n                292: {\n                    'name': 'T4Options',\n                    'type': 'Long'\n                },\n                293: {\n                    'name': 'T6Options',\n                    'type': 'Long'\n                },\n                296: {\n                    'name': 'ResolutionUnit',\n                    'type': 'Short'\n                },\n                301: {\n                    'name': 'TransferFunction',\n                    'type': 'Short'\n                },\n                305: {\n                    'name': 'Software',\n                    'type': 'Ascii'\n                },\n                306: {\n                    'name': 'DateTime',\n                    'type': 'Ascii'\n                },\n                315: {\n                    'name': 'Artist',\n                    'type': 'Ascii'\n                },\n                316: {\n                    'name': 'HostComputer',\n                    'type': 'Ascii'\n                },\n                317: {\n                    'name': 'Predictor',\n                    'type': 'Short'\n                },\n                318: {\n                    'name': 'WhitePoint',\n                    'type': 'Rational'\n                },\n                319: {\n                    'name': 'PrimaryChromaticities',\n                    'type': 'Rational'\n                },\n                320: {\n                    'name': 'ColorMap',\n                    'type': 'Short'\n                },\n                321: {\n                    'name': 'HalftoneHints',\n                    'type': 'Short'\n                },\n                322: {\n                    'name': 'TileWidth',\n                    'type': 'Short'\n                },\n                323: {\n                    'name': 'TileLength',\n                    'type': 'Short'\n                },\n                324: {\n                    'name': 'TileOffsets',\n                    'type': 'Short'\n                },\n                325: {\n                    'name': 'TileByteCounts',\n                    'type': 'Short'\n                },\n                330: {\n                    'name': 'SubIFDs',\n                    'type': 'Long'\n                },\n                332: {\n                    'name': 'InkSet',\n                    'type': 'Short'\n                },\n                333: {\n                    'name': 'InkNames',\n                    'type': 'Ascii'\n                },\n                334: {\n                    'name': 'NumberOfInks',\n                    'type': 'Short'\n                },\n                336: {\n                    'name': 'DotRange',\n                    'type': 'Byte'\n                },\n                337: {\n                    'name': 'TargetPrinter',\n                    'type': 'Ascii'\n                },\n                338: {\n                    'name': 'ExtraSamples',\n                    'type': 'Short'\n                },\n                339: {\n                    'name': 'SampleFormat',\n                    'type': 'Short'\n                },\n                340: {\n                    'name': 'SMinSampleValue',\n                    'type': 'Short'\n                },\n                341: {\n                    'name': 'SMaxSampleValue',\n                    'type': 'Short'\n                },\n                342: {\n                    'name': 'TransferRange',\n                    'type': 'Short'\n                },\n                343: {\n                    'name': 'ClipPath',\n                    'type': 'Byte'\n                },\n                344: {\n                    'name': 'XClipPathUnits',\n                    'type': 'Long'\n                },\n                345: {\n                    'name': 'YClipPathUnits',\n                    'type': 'Long'\n                },\n                346: {\n                    'name': 'Indexed',\n                    'type': 'Short'\n                },\n                347: {\n                    'name': 'JPEGTables',\n                    'type': 'Undefined'\n                },\n                351: {\n                    'name': 'OPIProxy',\n                    'type': 'Short'\n                },\n                512: {\n                    'name': 'JPEGProc',\n                    'type': 'Long'\n                },\n                513: {\n                    'name': 'JPEGInterchangeFormat',\n                    'type': 'Long'\n                },\n                514: {\n                    'name': 'JPEGInterchangeFormatLength',\n                    'type': 'Long'\n                },\n                515: {\n                    'name': 'JPEGRestartInterval',\n                    'type': 'Short'\n                },\n                517: {\n                    'name': 'JPEGLosslessPredictors',\n                    'type': 'Short'\n                },\n                518: {\n                    'name': 'JPEGPointTransforms',\n                    'type': 'Short'\n                },\n                519: {\n                    'name': 'JPEGQTables',\n                    'type': 'Long'\n                },\n                520: {\n                    'name': 'JPEGDCTables',\n                    'type': 'Long'\n                },\n                521: {\n                    'name': 'JPEGACTables',\n                    'type': 'Long'\n                },\n                529: {\n                    'name': 'YCbCrCoefficients',\n                    'type': 'Rational'\n                },\n                530: {\n                    'name': 'YCbCrSubSampling',\n                    'type': 'Short'\n                },\n                531: {\n                    'name': 'YCbCrPositioning',\n                    'type': 'Short'\n                },\n                532: {\n                    'name': 'ReferenceBlackWhite',\n                    'type': 'Rational'\n                },\n                700: {\n                    'name': 'XMLPacket',\n                    'type': 'Byte'\n                },\n                18246: {\n                    'name': 'Rating',\n                    'type': 'Short'\n                },\n                18249: {\n                    'name': 'RatingPercent',\n                    'type': 'Short'\n                },\n                32781: {\n                    'name': 'ImageID',\n                    'type': 'Ascii'\n                },\n                33421: {\n                    'name': 'CFARepeatPatternDim',\n                    'type': 'Short'\n                },\n                33422: {\n                    'name': 'CFAPattern',\n                    'type': 'Byte'\n                },\n                33423: {\n                    'name': 'BatteryLevel',\n                    'type': 'Rational'\n                },\n                33432: {\n                    'name': 'Copyright',\n                    'type': 'Ascii'\n                },\n                33434: {\n                    'name': 'ExposureTime',\n                    'type': 'Rational'\n                },\n                34377: {\n                    'name': 'ImageResources',\n                    'type': 'Byte'\n                },\n                34665: {\n                    'name': 'ExifTag',\n                    'type': 'Long'\n                },\n                34675: {\n                    'name': 'InterColorProfile',\n                    'type': 'Undefined'\n                },\n                34853: {\n                    'name': 'GPSTag',\n                    'type': 'Long'\n                },\n                34857: {\n                    'name': 'Interlace',\n                    'type': 'Short'\n                },\n                34858: {\n                    'name': 'TimeZoneOffset',\n                    'type': 'Long'\n                },\n                34859: {\n                    'name': 'SelfTimerMode',\n                    'type': 'Short'\n                },\n                37387: {\n                    'name': 'FlashEnergy',\n                    'type': 'Rational'\n                },\n                37388: {\n                    'name': 'SpatialFrequencyResponse',\n                    'type': 'Undefined'\n                },\n                37389: {\n                    'name': 'Noise',\n                    'type': 'Undefined'\n                },\n                37390: {\n                    'name': 'FocalPlaneXResolution',\n                    'type': 'Rational'\n                },\n                37391: {\n                    'name': 'FocalPlaneYResolution',\n                    'type': 'Rational'\n                },\n                37392: {\n                    'name': 'FocalPlaneResolutionUnit',\n                    'type': 'Short'\n                },\n                37393: {\n                    'name': 'ImageNumber',\n                    'type': 'Long'\n                },\n                37394: {\n                    'name': 'SecurityClassification',\n                    'type': 'Ascii'\n                },\n                37395: {\n                    'name': 'ImageHistory',\n                    'type': 'Ascii'\n                },\n                37397: {\n                    'name': 'ExposureIndex',\n                    'type': 'Rational'\n                },\n                37398: {\n                    'name': 'TIFFEPStandardID',\n                    'type': 'Byte'\n                },\n                37399: {\n                    'name': 'SensingMethod',\n                    'type': 'Short'\n                },\n                40091: {\n                    'name': 'XPTitle',\n                    'type': 'Byte'\n                },\n                40092: {\n                    'name': 'XPComment',\n                    'type': 'Byte'\n                },\n                40093: {\n                    'name': 'XPAuthor',\n                    'type': 'Byte'\n                },\n                40094: {\n                    'name': 'XPKeywords',\n                    'type': 'Byte'\n                },\n                40095: {\n                    'name': 'XPSubject',\n                    'type': 'Byte'\n                },\n                50341: {\n                    'name': 'PrintImageMatching',\n                    'type': 'Undefined'\n                },\n                50706: {\n                    'name': 'DNGVersion',\n                    'type': 'Byte'\n                },\n                50707: {\n                    'name': 'DNGBackwardVersion',\n                    'type': 'Byte'\n                },\n                50708: {\n                    'name': 'UniqueCameraModel',\n                    'type': 'Ascii'\n                },\n                50709: {\n                    'name': 'LocalizedCameraModel',\n                    'type': 'Byte'\n                },\n                50710: {\n                    'name': 'CFAPlaneColor',\n                    'type': 'Byte'\n                },\n                50711: {\n                    'name': 'CFALayout',\n                    'type': 'Short'\n                },\n                50712: {\n                    'name': 'LinearizationTable',\n                    'type': 'Short'\n                },\n                50713: {\n                    'name': 'BlackLevelRepeatDim',\n                    'type': 'Short'\n                },\n                50714: {\n                    'name': 'BlackLevel',\n                    'type': 'Rational'\n                },\n                50715: {\n                    'name': 'BlackLevelDeltaH',\n                    'type': 'SRational'\n                },\n                50716: {\n                    'name': 'BlackLevelDeltaV',\n                    'type': 'SRational'\n                },\n                50717: {\n                    'name': 'WhiteLevel',\n                    'type': 'Short'\n                },\n                50718: {\n                    'name': 'DefaultScale',\n                    'type': 'Rational'\n                },\n                50719: {\n                    'name': 'DefaultCropOrigin',\n                    'type': 'Short'\n                },\n                50720: {\n                    'name': 'DefaultCropSize',\n                    'type': 'Short'\n                },\n                50721: {\n                    'name': 'ColorMatrix1',\n                    'type': 'SRational'\n                },\n                50722: {\n                    'name': 'ColorMatrix2',\n                    'type': 'SRational'\n                },\n                50723: {\n                    'name': 'CameraCalibration1',\n                    'type': 'SRational'\n                },\n                50724: {\n                    'name': 'CameraCalibration2',\n                    'type': 'SRational'\n                },\n                50725: {\n                    'name': 'ReductionMatrix1',\n                    'type': 'SRational'\n                },\n                50726: {\n                    'name': 'ReductionMatrix2',\n                    'type': 'SRational'\n                },\n                50727: {\n                    'name': 'AnalogBalance',\n                    'type': 'Rational'\n                },\n                50728: {\n                    'name': 'AsShotNeutral',\n                    'type': 'Short'\n                },\n                50729: {\n                    'name': 'AsShotWhiteXY',\n                    'type': 'Rational'\n                },\n                50730: {\n                    'name': 'BaselineExposure',\n                    'type': 'SRational'\n                },\n                50731: {\n                    'name': 'BaselineNoise',\n                    'type': 'Rational'\n                },\n                50732: {\n                    'name': 'BaselineSharpness',\n                    'type': 'Rational'\n                },\n                50733: {\n                    'name': 'BayerGreenSplit',\n                    'type': 'Long'\n                },\n                50734: {\n                    'name': 'LinearResponseLimit',\n                    'type': 'Rational'\n                },\n                50735: {\n                    'name': 'CameraSerialNumber',\n                    'type': 'Ascii'\n                },\n                50736: {\n                    'name': 'LensInfo',\n                    'type': 'Rational'\n                },\n                50737: {\n                    'name': 'ChromaBlurRadius',\n                    'type': 'Rational'\n                },\n                50738: {\n                    'name': 'AntiAliasStrength',\n                    'type': 'Rational'\n                },\n                50739: {\n                    'name': 'ShadowScale',\n                    'type': 'SRational'\n                },\n                50740: {\n                    'name': 'DNGPrivateData',\n                    'type': 'Byte'\n                },\n                50741: {\n                    'name': 'MakerNoteSafety',\n                    'type': 'Short'\n                },\n                50778: {\n                    'name': 'CalibrationIlluminant1',\n                    'type': 'Short'\n                },\n                50779: {\n                    'name': 'CalibrationIlluminant2',\n                    'type': 'Short'\n                },\n                50780: {\n                    'name': 'BestQualityScale',\n                    'type': 'Rational'\n                },\n                50781: {\n                    'name': 'RawDataUniqueID',\n                    'type': 'Byte'\n                },\n                50827: {\n                    'name': 'OriginalRawFileName',\n                    'type': 'Byte'\n                },\n                50828: {\n                    'name': 'OriginalRawFileData',\n                    'type': 'Undefined'\n                },\n                50829: {\n                    'name': 'ActiveArea',\n                    'type': 'Short'\n                },\n                50830: {\n                    'name': 'MaskedAreas',\n                    'type': 'Short'\n                },\n                50831: {\n                    'name': 'AsShotICCProfile',\n                    'type': 'Undefined'\n                },\n                50832: {\n                    'name': 'AsShotPreProfileMatrix',\n                    'type': 'SRational'\n                },\n                50833: {\n                    'name': 'CurrentICCProfile',\n                    'type': 'Undefined'\n                },\n                50834: {\n                    'name': 'CurrentPreProfileMatrix',\n                    'type': 'SRational'\n                },\n                50879: {\n                    'name': 'ColorimetricReference',\n                    'type': 'Short'\n                },\n                50931: {\n                    'name': 'CameraCalibrationSignature',\n                    'type': 'Byte'\n                },\n                50932: {\n                    'name': 'ProfileCalibrationSignature',\n                    'type': 'Byte'\n                },\n                50934: {\n                    'name': 'AsShotProfileName',\n                    'type': 'Byte'\n                },\n                50935: {\n                    'name': 'NoiseReductionApplied',\n                    'type': 'Rational'\n                },\n                50936: {\n                    'name': 'ProfileName',\n                    'type': 'Byte'\n                },\n                50937: {\n                    'name': 'ProfileHueSatMapDims',\n                    'type': 'Long'\n                },\n                50938: {\n                    'name': 'ProfileHueSatMapData1',\n                    'type': 'Float'\n                },\n                50939: {\n                    'name': 'ProfileHueSatMapData2',\n                    'type': 'Float'\n                },\n                50940: {\n                    'name': 'ProfileToneCurve',\n                    'type': 'Float'\n                },\n                50941: {\n                    'name': 'ProfileEmbedPolicy',\n                    'type': 'Long'\n                },\n                50942: {\n                    'name': 'ProfileCopyright',\n                    'type': 'Byte'\n                },\n                50964: {\n                    'name': 'ForwardMatrix1',\n                    'type': 'SRational'\n                },\n                50965: {\n                    'name': 'ForwardMatrix2',\n                    'type': 'SRational'\n                },\n                50966: {\n                    'name': 'PreviewApplicationName',\n                    'type': 'Byte'\n                },\n                50967: {\n                    'name': 'PreviewApplicationVersion',\n                    'type': 'Byte'\n                },\n                50968: {\n                    'name': 'PreviewSettingsName',\n                    'type': 'Byte'\n                },\n                50969: {\n                    'name': 'PreviewSettingsDigest',\n                    'type': 'Byte'\n                },\n                50970: {\n                    'name': 'PreviewColorSpace',\n                    'type': 'Long'\n                },\n                50971: {\n                    'name': 'PreviewDateTime',\n                    'type': 'Ascii'\n                },\n                50972: {\n                    'name': 'RawImageDigest',\n                    'type': 'Undefined'\n                },\n                50973: {\n                    'name': 'OriginalRawFileDigest',\n                    'type': 'Undefined'\n                },\n                50974: {\n                    'name': 'SubTileBlockSize',\n                    'type': 'Long'\n                },\n                50975: {\n                    'name': 'RowInterleaveFactor',\n                    'type': 'Long'\n                },\n                50981: {\n                    'name': 'ProfileLookTableDims',\n                    'type': 'Long'\n                },\n                50982: {\n                    'name': 'ProfileLookTableData',\n                    'type': 'Float'\n                },\n                51008: {\n                    'name': 'OpcodeList1',\n                    'type': 'Undefined'\n                },\n                51009: {\n                    'name': 'OpcodeList2',\n                    'type': 'Undefined'\n                },\n                51022: {\n                    'name': 'OpcodeList3',\n                    'type': 'Undefined'\n                }\n            },\n            'Exif': {\n                33434: {\n                    'name': 'ExposureTime',\n                    'type': 'Rational'\n                },\n                33437: {\n                    'name': 'FNumber',\n                    'type': 'Rational'\n                },\n                34850: {\n                    'name': 'ExposureProgram',\n                    'type': 'Short'\n                },\n                34852: {\n                    'name': 'SpectralSensitivity',\n                    'type': 'Ascii'\n                },\n                34855: {\n                    'name': 'ISOSpeedRatings',\n                    'type': 'Short'\n                },\n                34856: {\n                    'name': 'OECF',\n                    'type': 'Undefined'\n                },\n                34864: {\n                    'name': 'SensitivityType',\n                    'type': 'Short'\n                },\n                34865: {\n                    'name': 'StandardOutputSensitivity',\n                    'type': 'Long'\n                },\n                34866: {\n                    'name': 'RecommendedExposureIndex',\n                    'type': 'Long'\n                },\n                34867: {\n                    'name': 'ISOSpeed',\n                    'type': 'Long'\n                },\n                34868: {\n                    'name': 'ISOSpeedLatitudeyyy',\n                    'type': 'Long'\n                },\n                34869: {\n                    'name': 'ISOSpeedLatitudezzz',\n                    'type': 'Long'\n                },\n                36864: {\n                    'name': 'ExifVersion',\n                    'type': 'Undefined'\n                },\n                36867: {\n                    'name': 'DateTimeOriginal',\n                    'type': 'Ascii'\n                },\n                36868: {\n                    'name': 'DateTimeDigitized',\n                    'type': 'Ascii'\n                },\n                37121: {\n                    'name': 'ComponentsConfiguration',\n                    'type': 'Undefined'\n                },\n                37122: {\n                    'name': 'CompressedBitsPerPixel',\n                    'type': 'Rational'\n                },\n                37377: {\n                    'name': 'ShutterSpeedValue',\n                    'type': 'SRational'\n                },\n                37378: {\n                    'name': 'ApertureValue',\n                    'type': 'Rational'\n                },\n                37379: {\n                    'name': 'BrightnessValue',\n                    'type': 'SRational'\n                },\n                37380: {\n                    'name': 'ExposureBiasValue',\n                    'type': 'SRational'\n                },\n                37381: {\n                    'name': 'MaxApertureValue',\n                    'type': 'Rational'\n                },\n                37382: {\n                    'name': 'SubjectDistance',\n                    'type': 'Rational'\n                },\n                37383: {\n                    'name': 'MeteringMode',\n                    'type': 'Short'\n                },\n                37384: {\n                    'name': 'LightSource',\n                    'type': 'Short'\n                },\n                37385: {\n                    'name': 'Flash',\n                    'type': 'Short'\n                },\n                37386: {\n                    'name': 'FocalLength',\n                    'type': 'Rational'\n                },\n                37396: {\n                    'name': 'SubjectArea',\n                    'type': 'Short'\n                },\n                37500: {\n                    'name': 'MakerNote',\n                    'type': 'Undefined'\n                },\n                37510: {\n                    'name': 'UserComment',\n                    'type': 'Ascii'\n                },\n                37520: {\n                    'name': 'SubSecTime',\n                    'type': 'Ascii'\n                },\n                37521: {\n                    'name': 'SubSecTimeOriginal',\n                    'type': 'Ascii'\n                },\n                37522: {\n                    'name': 'SubSecTimeDigitized',\n                    'type': 'Ascii'\n                },\n                40960: {\n                    'name': 'FlashpixVersion',\n                    'type': 'Undefined'\n                },\n                40961: {\n                    'name': 'ColorSpace',\n                    'type': 'Short'\n                },\n                40962: {\n                    'name': 'PixelXDimension',\n                    'type': 'Long'\n                },\n                40963: {\n                    'name': 'PixelYDimension',\n                    'type': 'Long'\n                },\n                40964: {\n                    'name': 'RelatedSoundFile',\n                    'type': 'Ascii'\n                },\n                40965: {\n                    'name': 'InteroperabilityTag',\n                    'type': 'Long'\n                },\n                41483: {\n                    'name': 'FlashEnergy',\n                    'type': 'Rational'\n                },\n                41484: {\n                    'name': 'SpatialFrequencyResponse',\n                    'type': 'Undefined'\n                },\n                41486: {\n                    'name': 'FocalPlaneXResolution',\n                    'type': 'Rational'\n                },\n                41487: {\n                    'name': 'FocalPlaneYResolution',\n                    'type': 'Rational'\n                },\n                41488: {\n                    'name': 'FocalPlaneResolutionUnit',\n                    'type': 'Short'\n                },\n                41492: {\n                    'name': 'SubjectLocation',\n                    'type': 'Short'\n                },\n                41493: {\n                    'name': 'ExposureIndex',\n                    'type': 'Rational'\n                },\n                41495: {\n                    'name': 'SensingMethod',\n                    'type': 'Short'\n                },\n                41728: {\n                    'name': 'FileSource',\n                    'type': 'Undefined'\n                },\n                41729: {\n                    'name': 'SceneType',\n                    'type': 'Undefined'\n                },\n                41730: {\n                    'name': 'CFAPattern',\n                    'type': 'Undefined'\n                },\n                41985: {\n                    'name': 'CustomRendered',\n                    'type': 'Short'\n                },\n                41986: {\n                    'name': 'ExposureMode',\n                    'type': 'Short'\n                },\n                41987: {\n                    'name': 'WhiteBalance',\n                    'type': 'Short'\n                },\n                41988: {\n                    'name': 'DigitalZoomRatio',\n                    'type': 'Rational'\n                },\n                41989: {\n                    'name': 'FocalLengthIn35mmFilm',\n                    'type': 'Short'\n                },\n                41990: {\n                    'name': 'SceneCaptureType',\n                    'type': 'Short'\n                },\n                41991: {\n                    'name': 'GainControl',\n                    'type': 'Short'\n                },\n                41992: {\n                    'name': 'Contrast',\n                    'type': 'Short'\n                },\n                41993: {\n                    'name': 'Saturation',\n                    'type': 'Short'\n                },\n                41994: {\n                    'name': 'Sharpness',\n                    'type': 'Short'\n                },\n                41995: {\n                    'name': 'DeviceSettingDescription',\n                    'type': 'Undefined'\n                },\n                41996: {\n                    'name': 'SubjectDistanceRange',\n                    'type': 'Short'\n                },\n                42016: {\n                    'name': 'ImageUniqueID',\n                    'type': 'Ascii'\n                },\n                42032: {\n                    'name': 'CameraOwnerName',\n                    'type': 'Ascii'\n                },\n                42033: {\n                    'name': 'BodySerialNumber',\n                    'type': 'Ascii'\n                },\n                42034: {\n                    'name': 'LensSpecification',\n                    'type': 'Rational'\n                },\n                42035: {\n                    'name': 'LensMake',\n                    'type': 'Ascii'\n                },\n                42036: {\n                    'name': 'LensModel',\n                    'type': 'Ascii'\n                },\n                42037: {\n                    'name': 'LensSerialNumber',\n                    'type': 'Ascii'\n                },\n                42240: {\n                    'name': 'Gamma',\n                    'type': 'Rational'\n                }\n            },\n            'GPS': {\n                0: {\n                    'name': 'GPSVersionID',\n                    'type': 'Byte'\n                },\n                1: {\n                    'name': 'GPSLatitudeRef',\n                    'type': 'Ascii'\n                },\n                2: {\n                    'name': 'GPSLatitude',\n                    'type': 'Rational'\n                },\n                3: {\n                    'name': 'GPSLongitudeRef',\n                    'type': 'Ascii'\n                },\n                4: {\n                    'name': 'GPSLongitude',\n                    'type': 'Rational'\n                },\n                5: {\n                    'name': 'GPSAltitudeRef',\n                    'type': 'Byte'\n                },\n                6: {\n                    'name': 'GPSAltitude',\n                    'type': 'Rational'\n                },\n                7: {\n                    'name': 'GPSTimeStamp',\n                    'type': 'Rational'\n                },\n                8: {\n                    'name': 'GPSSatellites',\n                    'type': 'Ascii'\n                },\n                9: {\n                    'name': 'GPSStatus',\n                    'type': 'Ascii'\n                },\n                10: {\n                    'name': 'GPSMeasureMode',\n                    'type': 'Ascii'\n                },\n                11: {\n                    'name': 'GPSDOP',\n                    'type': 'Rational'\n                },\n                12: {\n                    'name': 'GPSSpeedRef',\n                    'type': 'Ascii'\n                },\n                13: {\n                    'name': 'GPSSpeed',\n                    'type': 'Rational'\n                },\n                14: {\n                    'name': 'GPSTrackRef',\n                    'type': 'Ascii'\n                },\n                15: {\n                    'name': 'GPSTrack',\n                    'type': 'Rational'\n                },\n                16: {\n                    'name': 'GPSImgDirectionRef',\n                    'type': 'Ascii'\n                },\n                17: {\n                    'name': 'GPSImgDirection',\n                    'type': 'Rational'\n                },\n                18: {\n                    'name': 'GPSMapDatum',\n                    'type': 'Ascii'\n                },\n                19: {\n                    'name': 'GPSDestLatitudeRef',\n                    'type': 'Ascii'\n                },\n                20: {\n                    'name': 'GPSDestLatitude',\n                    'type': 'Rational'\n                },\n                21: {\n                    'name': 'GPSDestLongitudeRef',\n                    'type': 'Ascii'\n                },\n                22: {\n                    'name': 'GPSDestLongitude',\n                    'type': 'Rational'\n                },\n                23: {\n                    'name': 'GPSDestBearingRef',\n                    'type': 'Ascii'\n                },\n                24: {\n                    'name': 'GPSDestBearing',\n                    'type': 'Rational'\n                },\n                25: {\n                    'name': 'GPSDestDistanceRef',\n                    'type': 'Ascii'\n                },\n                26: {\n                    'name': 'GPSDestDistance',\n                    'type': 'Rational'\n                },\n                27: {\n                    'name': 'GPSProcessingMethod',\n                    'type': 'Undefined'\n                },\n                28: {\n                    'name': 'GPSAreaInformation',\n                    'type': 'Undefined'\n                },\n                29: {\n                    'name': 'GPSDateStamp',\n                    'type': 'Ascii'\n                },\n                30: {\n                    'name': 'GPSDifferential',\n                    'type': 'Short'\n                },\n                31: {\n                    'name': 'GPSHPositioningError',\n                    'type': 'Rational'\n                }\n            },\n            'Interop': {\n                1: {\n                    'name': 'InteroperabilityIndex',\n                    'type': 'Ascii'\n                }\n            }\n        };\n        TAGS[\"0th\"] = TAGS[\"Image\"];\n        TAGS[\"1st\"] = TAGS[\"Image\"];\n        that.TAGS = TAGS;\n\n        that.ImageIFD = {\n            ProcessingSoftware: 11,\n            NewSubfileType: 254,\n            SubfileType: 255,\n            ImageWidth: 256,\n            ImageLength: 257,\n            BitsPerSample: 258,\n            Compression: 259,\n            PhotometricInterpretation: 262,\n            Threshholding: 263,\n            CellWidth: 264,\n            CellLength: 265,\n            FillOrder: 266,\n            DocumentName: 269,\n            ImageDescription: 270,\n            Make: 271,\n            Model: 272,\n            StripOffsets: 273,\n            Orientation: 274,\n            SamplesPerPixel: 277,\n            RowsPerStrip: 278,\n            StripByteCounts: 279,\n            XResolution: 282,\n            YResolution: 283,\n            PlanarConfiguration: 284,\n            GrayResponseUnit: 290,\n            GrayResponseCurve: 291,\n            T4Options: 292,\n            T6Options: 293,\n            ResolutionUnit: 296,\n            TransferFunction: 301,\n            Software: 305,\n            DateTime: 306,\n            Artist: 315,\n            HostComputer: 316,\n            Predictor: 317,\n            WhitePoint: 318,\n            PrimaryChromaticities: 319,\n            ColorMap: 320,\n            HalftoneHints: 321,\n            TileWidth: 322,\n            TileLength: 323,\n            TileOffsets: 324,\n            TileByteCounts: 325,\n            SubIFDs: 330,\n            InkSet: 332,\n            InkNames: 333,\n            NumberOfInks: 334,\n            DotRange: 336,\n            TargetPrinter: 337,\n            ExtraSamples: 338,\n            SampleFormat: 339,\n            SMinSampleValue: 340,\n            SMaxSampleValue: 341,\n            TransferRange: 342,\n            ClipPath: 343,\n            XClipPathUnits: 344,\n            YClipPathUnits: 345,\n            Indexed: 346,\n            JPEGTables: 347,\n            OPIProxy: 351,\n            JPEGProc: 512,\n            JPEGInterchangeFormat: 513,\n            JPEGInterchangeFormatLength: 514,\n            JPEGRestartInterval: 515,\n            JPEGLosslessPredictors: 517,\n            JPEGPointTransforms: 518,\n            JPEGQTables: 519,\n            JPEGDCTables: 520,\n            JPEGACTables: 521,\n            YCbCrCoefficients: 529,\n            YCbCrSubSampling: 530,\n            YCbCrPositioning: 531,\n            ReferenceBlackWhite: 532,\n            XMLPacket: 700,\n            Rating: 18246,\n            RatingPercent: 18249,\n            ImageID: 32781,\n            CFARepeatPatternDim: 33421,\n            CFAPattern: 33422,\n            BatteryLevel: 33423,\n            Copyright: 33432,\n            ExposureTime: 33434,\n            ImageResources: 34377,\n            ExifTag: 34665,\n            InterColorProfile: 34675,\n            GPSTag: 34853,\n            Interlace: 34857,\n            TimeZoneOffset: 34858,\n            SelfTimerMode: 34859,\n            FlashEnergy: 37387,\n            SpatialFrequencyResponse: 37388,\n            Noise: 37389,\n            FocalPlaneXResolution: 37390,\n            FocalPlaneYResolution: 37391,\n            FocalPlaneResolutionUnit: 37392,\n            ImageNumber: 37393,\n            SecurityClassification: 37394,\n            ImageHistory: 37395,\n            ExposureIndex: 37397,\n            TIFFEPStandardID: 37398,\n            SensingMethod: 37399,\n            XPTitle: 40091,\n            XPComment: 40092,\n            XPAuthor: 40093,\n            XPKeywords: 40094,\n            XPSubject: 40095,\n            PrintImageMatching: 50341,\n            DNGVersion: 50706,\n            DNGBackwardVersion: 50707,\n            UniqueCameraModel: 50708,\n            LocalizedCameraModel: 50709,\n            CFAPlaneColor: 50710,\n            CFALayout: 50711,\n            LinearizationTable: 50712,\n            BlackLevelRepeatDim: 50713,\n            BlackLevel: 50714,\n            BlackLevelDeltaH: 50715,\n            BlackLevelDeltaV: 50716,\n            WhiteLevel: 50717,\n            DefaultScale: 50718,\n            DefaultCropOrigin: 50719,\n            DefaultCropSize: 50720,\n            ColorMatrix1: 50721,\n            ColorMatrix2: 50722,\n            CameraCalibration1: 50723,\n            CameraCalibration2: 50724,\n            ReductionMatrix1: 50725,\n            ReductionMatrix2: 50726,\n            AnalogBalance: 50727,\n            AsShotNeutral: 50728,\n            AsShotWhiteXY: 50729,\n            BaselineExposure: 50730,\n            BaselineNoise: 50731,\n            BaselineSharpness: 50732,\n            BayerGreenSplit: 50733,\n            LinearResponseLimit: 50734,\n            CameraSerialNumber: 50735,\n            LensInfo: 50736,\n            ChromaBlurRadius: 50737,\n            AntiAliasStrength: 50738,\n            ShadowScale: 50739,\n            DNGPrivateData: 50740,\n            MakerNoteSafety: 50741,\n            CalibrationIlluminant1: 50778,\n            CalibrationIlluminant2: 50779,\n            BestQualityScale: 50780,\n            RawDataUniqueID: 50781,\n            OriginalRawFileName: 50827,\n            OriginalRawFileData: 50828,\n            ActiveArea: 50829,\n            MaskedAreas: 50830,\n            AsShotICCProfile: 50831,\n            AsShotPreProfileMatrix: 50832,\n            CurrentICCProfile: 50833,\n            CurrentPreProfileMatrix: 50834,\n            ColorimetricReference: 50879,\n            CameraCalibrationSignature: 50931,\n            ProfileCalibrationSignature: 50932,\n            AsShotProfileName: 50934,\n            NoiseReductionApplied: 50935,\n            ProfileName: 50936,\n            ProfileHueSatMapDims: 50937,\n            ProfileHueSatMapData1: 50938,\n            ProfileHueSatMapData2: 50939,\n            ProfileToneCurve: 50940,\n            ProfileEmbedPolicy: 50941,\n            ProfileCopyright: 50942,\n            ForwardMatrix1: 50964,\n            ForwardMatrix2: 50965,\n            PreviewApplicationName: 50966,\n            PreviewApplicationVersion: 50967,\n            PreviewSettingsName: 50968,\n            PreviewSettingsDigest: 50969,\n            PreviewColorSpace: 50970,\n            PreviewDateTime: 50971,\n            RawImageDigest: 50972,\n            OriginalRawFileDigest: 50973,\n            SubTileBlockSize: 50974,\n            RowInterleaveFactor: 50975,\n            ProfileLookTableDims: 50981,\n            ProfileLookTableData: 50982,\n            OpcodeList1: 51008,\n            OpcodeList2: 51009,\n            OpcodeList3: 51022,\n            NoiseProfile: 51041\n        };\n\n        that.ExifIFD = {\n            ExposureTime: 33434,\n            FNumber: 33437,\n            ExposureProgram: 34850,\n            SpectralSensitivity: 34852,\n            ISOSpeedRatings: 34855,\n            OECF: 34856,\n            SensitivityType: 34864,\n            StandardOutputSensitivity: 34865,\n            RecommendedExposureIndex: 34866,\n            ISOSpeed: 34867,\n            ISOSpeedLatitudeyyy: 34868,\n            ISOSpeedLatitudezzz: 34869,\n            ExifVersion: 36864,\n            DateTimeOriginal: 36867,\n            DateTimeDigitized: 36868,\n            ComponentsConfiguration: 37121,\n            CompressedBitsPerPixel: 37122,\n            ShutterSpeedValue: 37377,\n            ApertureValue: 37378,\n            BrightnessValue: 37379,\n            ExposureBiasValue: 37380,\n            MaxApertureValue: 37381,\n            SubjectDistance: 37382,\n            MeteringMode: 37383,\n            LightSource: 37384,\n            Flash: 37385,\n            FocalLength: 37386,\n            SubjectArea: 37396,\n            MakerNote: 37500,\n            UserComment: 37510,\n            SubSecTime: 37520,\n            SubSecTimeOriginal: 37521,\n            SubSecTimeDigitized: 37522,\n            FlashpixVersion: 40960,\n            ColorSpace: 40961,\n            PixelXDimension: 40962,\n            PixelYDimension: 40963,\n            RelatedSoundFile: 40964,\n            InteroperabilityTag: 40965,\n            FlashEnergy: 41483,\n            SpatialFrequencyResponse: 41484,\n            FocalPlaneXResolution: 41486,\n            FocalPlaneYResolution: 41487,\n            FocalPlaneResolutionUnit: 41488,\n            SubjectLocation: 41492,\n            ExposureIndex: 41493,\n            SensingMethod: 41495,\n            FileSource: 41728,\n            SceneType: 41729,\n            CFAPattern: 41730,\n            CustomRendered: 41985,\n            ExposureMode: 41986,\n            WhiteBalance: 41987,\n            DigitalZoomRatio: 41988,\n            FocalLengthIn35mmFilm: 41989,\n            SceneCaptureType: 41990,\n            GainControl: 41991,\n            Contrast: 41992,\n            Saturation: 41993,\n            Sharpness: 41994,\n            DeviceSettingDescription: 41995,\n            SubjectDistanceRange: 41996,\n            ImageUniqueID: 42016,\n            CameraOwnerName: 42032,\n            BodySerialNumber: 42033,\n            LensSpecification: 42034,\n            LensMake: 42035,\n            LensModel: 42036,\n            LensSerialNumber: 42037,\n            Gamma: 42240\n        };\n\n        that.GPSIFD = {\n            GPSVersionID: 0,\n            GPSLatitudeRef: 1,\n            GPSLatitude: 2,\n            GPSLongitudeRef: 3,\n            GPSLongitude: 4,\n            GPSAltitudeRef: 5,\n            GPSAltitude: 6,\n            GPSTimeStamp: 7,\n            GPSSatellites: 8,\n            GPSStatus: 9,\n            GPSMeasureMode: 10,\n            GPSDOP: 11,\n            GPSSpeedRef: 12,\n            GPSSpeed: 13,\n            GPSTrackRef: 14,\n            GPSTrack: 15,\n            GPSImgDirectionRef: 16,\n            GPSImgDirection: 17,\n            GPSMapDatum: 18,\n            GPSDestLatitudeRef: 19,\n            GPSDestLatitude: 20,\n            GPSDestLongitudeRef: 21,\n            GPSDestLongitude: 22,\n            GPSDestBearingRef: 23,\n            GPSDestBearing: 24,\n            GPSDestDistanceRef: 25,\n            GPSDestDistance: 26,\n            GPSProcessingMethod: 27,\n            GPSAreaInformation: 28,\n            GPSDateStamp: 29,\n            GPSDifferential: 30,\n            GPSHPositioningError: 31\n        };\n\n        that.InteropIFD = {\n            InteroperabilityIndex: 1\n        };\n\n        if (typeof exports !== 'undefined') {\n            if (typeof module !== 'undefined' && module.exports) {\n                exports = module.exports = that;\n            }\n            exports.piexif = that;\n        } else {\n            window.piexif = that;\n        }\n    })();\n});\n\n},{}],3:[function(require,module,exports){\n(function (global, factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine([\"exports\"], factory);\n\t} else if (typeof exports !== \"undefined\") {\n\t\tfactory(exports);\n\t} else {\n\t\tvar mod = {\n\t\t\texports: {}\n\t\t};\n\t\tfactory(mod.exports);\n\t\tglobal.resize = mod.exports;\n\t}\n})(this, function (exports) {\n\t\"use strict\";\n\n\t(function (global, factory) {\n\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\tdefine([\"exports\"], factory);\n\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\tfactory(exports);\n\t\t} else {\n\t\t\tvar mod = {\n\t\t\t\texports: {}\n\t\t\t};\n\t\t\tfactory(mod.exports);\n\t\t\tglobal.resize = mod.exports;\n\t\t}\n\t})(undefined, function (exports) {\n\t\t\"use strict\";\n\n\t\t(function (global, factory) {\n\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\tfactory(exports);\n\t\t\t} else {\n\t\t\t\tvar mod = {\n\t\t\t\t\texports: {}\n\t\t\t\t};\n\t\t\t\tfactory(mod.exports);\n\t\t\t\tglobal.resize = mod.exports;\n\t\t\t}\n\t\t})(undefined, function (exports) {\n\t\t\t\"use strict\";\n\n\t\t\t(function (global, factory) {\n\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\tfactory(exports);\n\t\t\t\t} else {\n\t\t\t\t\tvar mod = {\n\t\t\t\t\t\texports: {}\n\t\t\t\t\t};\n\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t}\n\t\t\t})(undefined, function (exports) {\n\t\t\t\t\"use strict\";\n\n\t\t\t\t(function (global, factory) {\n\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t}\n\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t}\n\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texports.Resize = Resize;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//JavaScript Image Resizer (c) 2012 - Grant Galitz\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar paths = scripts[scripts.length - 1].src.split(\"/\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpaths.pop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar sourceOfWorker = paths.join(\"/\") + \"/resize.js\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction Resize(widthOriginal, heightOriginal, targetWidth, targetHeight, blendAlpha, interpolationPass, useWebWorker, resizeCallback) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.widthOriginal = Math.abs(parseInt(widthOriginal) || 0);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.heightOriginal = Math.abs(parseInt(heightOriginal) || 0);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.targetWidth = Math.abs(parseInt(targetWidth) || 0);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.targetHeight = Math.abs(parseInt(targetHeight) || 0);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.colorChannels = !!blendAlpha ? 4 : 3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.interpolationPass = !!interpolationPass;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.useWebWorker = !!useWebWorker;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeCallback = typeof resizeCallback == \"function\" ? resizeCallback : function (returnedArray) {};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.targetWidthMultipliedByChannels = this.targetWidth * this.colorChannels;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.originalWidthMultipliedByChannels = this.widthOriginal * this.colorChannels;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.originalHeightMultipliedByChannels = this.heightOriginal * this.colorChannels;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.widthPassResultSize = this.targetWidthMultipliedByChannels * this.heightOriginal;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.finalResultSize = this.targetWidthMultipliedByChannels * this.targetHeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.initialize();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.initialize = function () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Perform some checks:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.widthOriginal > 0 && this.heightOriginal > 0 && this.targetWidth > 0 && this.targetHeight > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.useWebWorker) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.useWebWorker = this.widthOriginal != this.targetWidth || this.heightOriginal != this.targetHeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.useWebWorker) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.configureWorker();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!this.useWebWorker) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.configurePasses();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\"Invalid settings specified for the resizer.\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.configureWorker = function () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar parentObj = this;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.worker = new Worker(sourceOfWorker.substring(0, sourceOfWorker.length - 3) + \"Worker.js\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.worker.onmessage = function (event) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tparentObj.heightBuffer = event.data;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tparentObj.resizeCallback(parentObj.heightBuffer);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.worker.postMessage([\"setup\", this.widthOriginal, this.heightOriginal, this.targetWidth, this.targetHeight, this.colorChannels, this.interpolationPass]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.useWebWorker = false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.configurePasses = function () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.widthOriginal == this.targetWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Bypass the width resizer pass:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeWidth = this.bypassResizer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Setup the width resizer pass:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.ratioWeightWidthPass = this.widthOriginal / this.targetWidth;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.ratioWeightWidthPass < 1 && this.interpolationPass) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.initializeFirstPassBuffers(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeWidth = this.colorChannels == 4 ? this.resizeWidthInterpolatedRGBA : this.resizeWidthInterpolatedRGB;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.initializeFirstPassBuffers(false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeWidth = this.colorChannels == 4 ? this.resizeWidthRGBA : this.resizeWidthRGB;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.heightOriginal == this.targetHeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Bypass the height resizer pass:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeHeight = this.bypassResizer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Setup the height resizer pass:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.ratioWeightHeightPass = this.heightOriginal / this.targetHeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.ratioWeightHeightPass < 1 && this.interpolationPass) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.initializeSecondPassBuffers(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeHeight = this.resizeHeightInterpolated;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.initializeSecondPassBuffers(false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeHeight = this.colorChannels == 4 ? this.resizeHeightRGBA : this.resizeHeightRGB;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeWidthRGB = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightWidthPass;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeightDivisor = 1 / ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar amountToNext = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar actualPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar currentPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar line = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar nextLineOffsetOriginalWidth = this.originalWidthMultipliedByChannels - 2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar nextLineOffsetTargetWidth = this.targetWidthMultipliedByChannels - 2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar output = this.outputWidthWorkBench;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.widthBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0; line < this.originalHeightMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight = ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (weight >= amountToNext) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition = actualPosition = actualPosition + 3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition += weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} while (weight > 0 && actualPosition < this.originalWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = outputOffset; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetTargetWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputOffset += 3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} while (outputOffset < this.targetWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeWidthInterpolatedRGB = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightWidthPass;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar finalOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar firstWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar secondWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.widthBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for start calculation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (var targetPosition = 0; weight < 1 / 3; targetPosition += 3, weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = 0; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Adjust for overshoot of the last pass's counter:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= 1 / 3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (var interpolationWidthSourceReadStop = this.widthOriginal - 1; weight < interpolationWidthSourceReadStop; targetPosition += 3, weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Calculate weightings:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsecondWeight = weight % 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfirstWeight = 1 - secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Interpolate:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = Math.floor(weight) * 3; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset] * firstWeight + buffer[pixelOffset + 3] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1] * firstWeight + buffer[pixelOffset + 4] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2] * firstWeight + buffer[pixelOffset + 5] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for end calculation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (interpolationWidthSourceReadStop = this.originalWidthMultipliedByChannels - 3; targetPosition < this.targetWidthMultipliedByChannels; targetPosition += 3) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = interpolationWidthSourceReadStop; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeWidthRGBA = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightWidthPass;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeightDivisor = 1 / ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar amountToNext = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar actualPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar currentPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar line = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar nextLineOffsetOriginalWidth = this.originalWidthMultipliedByChannels - 3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar nextLineOffsetTargetWidth = this.targetWidthMultipliedByChannels - 3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar output = this.outputWidthWorkBench;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.widthBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0; line < this.originalHeightMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight = ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (weight >= amountToNext) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition = actualPosition = actualPosition + 4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition += weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} while (weight > 0 && actualPosition < this.originalWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = outputOffset; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetTargetWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputOffset += 4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} while (outputOffset < this.targetWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeWidthInterpolatedRGBA = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightWidthPass;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar finalOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar firstWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar secondWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.widthBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for start calculation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (var targetPosition = 0; weight < 1 / 3; targetPosition += 4, weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = 0; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Adjust for overshoot of the last pass's counter:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= 1 / 3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (var interpolationWidthSourceReadStop = this.widthOriginal - 1; weight < interpolationWidthSourceReadStop; targetPosition += 4, weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Calculate weightings:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsecondWeight = weight % 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfirstWeight = 1 - secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Interpolate:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = Math.floor(weight) * 4; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset] * firstWeight + buffer[pixelOffset + 4] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1] * firstWeight + buffer[pixelOffset + 5] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2] * firstWeight + buffer[pixelOffset + 6] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 3] = buffer[pixelOffset + 3] * firstWeight + buffer[pixelOffset + 7] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for end calculation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (interpolationWidthSourceReadStop = this.originalWidthMultipliedByChannels - 4; targetPosition < this.targetWidthMultipliedByChannels; targetPosition += 4) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = interpolationWidthSourceReadStop; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeHeightRGB = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightHeightPass;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeightDivisor = 1 / ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar amountToNext = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar actualPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar currentPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar output = this.outputHeightWorkBench;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.heightBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight = ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (weight >= amountToNext) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition = actualPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0, amountToNext = actualPosition; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition += weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} while (weight > 0 && actualPosition < this.widthPassResultSize);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} while (outputOffset < this.finalResultSize);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeHeightInterpolated = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightHeightPass;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar finalOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pixelOffsetAccumulated = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pixelOffsetAccumulated2 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar firstWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar secondWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.heightBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for start calculation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (; weight < 1 / 3; weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset++] = Math.round(buffer[pixelOffset++]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Adjust for overshoot of the last pass's counter:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= 1 / 3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (var interpolationHeightSourceReadStop = this.heightOriginal - 1; weight < interpolationHeightSourceReadStop; weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Calculate weightings:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsecondWeight = weight % 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfirstWeight = 1 - secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Interpolate:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpixelOffsetAccumulated = Math.floor(weight) * this.targetWidthMultipliedByChannels;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpixelOffsetAccumulated2 = pixelOffsetAccumulated + this.targetWidthMultipliedByChannels;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++] * firstWeight + buffer[pixelOffsetAccumulated2++] * secondWeight);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for end calculation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile (finalOffset < this.finalResultSize) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0, pixelOffsetAccumulated = interpolationHeightSourceReadStop * this.targetWidthMultipliedByChannels; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeHeightRGBA = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightHeightPass;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar ratioWeightDivisor = 1 / ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar amountToNext = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar actualPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar currentPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar output = this.outputHeightWorkBench;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.heightBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight = ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (weight >= amountToNext) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition = actualPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0, amountToNext = actualPosition; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition += weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} while (weight > 0 && actualPosition < this.widthPassResultSize);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} while (outputOffset < this.finalResultSize);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.resize = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.useWebWorker) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.worker.postMessage([\"resize\", buffer]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeCallback(this.resizeHeight(this.resizeWidth(buffer)));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.bypassResizer = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Just return the buffer passsed:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn buffer;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.initializeFirstPassBuffers = function (BILINEARAlgo) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Initialize the internal width pass buffers:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.widthBuffer = this.generateFloatBuffer(this.widthPassResultSize);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!BILINEARAlgo) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.outputWidthWorkBench = this.generateFloatBuffer(this.originalHeightMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.initializeSecondPassBuffers = function (BILINEARAlgo) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Initialize the internal height pass buffers:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.heightBuffer = this.generateUint8Buffer(this.finalResultSize);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (!BILINEARAlgo) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.outputHeightWorkBench = this.generateFloatBuffer(this.targetWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.generateFloatBuffer = function (bufferLength) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Generate a float32 typed array buffer:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new Float32Array(bufferLength);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tResize.prototype.generateUint8Buffer = function (bufferLength) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Generate a uint8 typed array buffer:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new Uint8Array(bufferLength);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});\n\n},{}]},{},[1]);\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['exports', './plugins/piexif', './plugins/resize'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('./plugins/piexif'), require('./plugins/resize'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.piexif, global.resize);\n        global.photoResize = mod.exports;\n    }\n})(this, function (exports, _piexif, _resize) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    var _piexif2 = _interopRequireDefault(_piexif);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    var PhotoResize = function () {\n        function PhotoResize(worker) {\n            _classCallCheck(this, PhotoResize);\n\n            // Workerを利用するかのフラグ\n            this.USE_WORKER = worker || true;\n        }\n\n        /** 指定のファイルを読み込む\n         * @param File file 読み込むファイル。fileタグなどで指定されたもの\n         * @param function callback 読み込みが完了したら呼び出すコールバック関数。引数として、読み込んだデータのDataURIを返す\n        */\n\n\n        _createClass(PhotoResize, [{\n            key: 'loadAndResize',\n            value: function loadAndResize(file, width, height, callback, isUp) {\n                var that = this;\n                var reader = new FileReader();\n                reader.onload = function (e) {\n                    that.resize(e.target.result, width, height, callback, isUp);\n                };\n                reader.readAsDataURL(file);\n            }\n        }, {\n            key: '_loadExif',\n            value: function _loadExif(data) {\n                this.exifObj = _piexif2.default.load(data);\n                return this.exifObj;\n            }\n        }, {\n            key: 'getImageSize',\n            value: function getImageSize(exifObj) {\n                var ret = [0, 0];\n                exifObj = exifObj || this.exifObj;\n\n                try {\n                    ret[0] = exifObj['0th'][_piexif2.default.ImageIFD.ImageWidth];\n                    ret[1] = exifObj['0th'][_piexif2.default.ImageIFD.ImageLength];\n                } catch (e) {\n                    try {\n                        ret[0] = exifObj['Exif'][_piexif2.default.ExifIFD.PixelXDimension];\n                        ret[1] = exifObj['Exif'][_piexif2.default.ExifIFD.PixelYDimension];\n                    } catch (ee) {\n                        return false;\n                    }\n                }\n\n                // 反転チェック\n                if (this.isSwapSide(exifObj)) {\n                    var temp = ret[0];\n                    ret[0] = ret[1];\n                    ret[1] = temp;\n                }\n                return ret;\n            }\n        }, {\n            key: 'isSwapSide',\n            value: function isSwapSide(exifObj) {\n                var ori = this.getOrientation(exifObj);\n                return ori >= 5;\n            }\n        }, {\n            key: '_JSImageResizer',\n            value: function _JSImageResizer(photo, origw, origh, dstw, dsth, callback) {\n                var resize = new _resize.Resize(origw, origh, dstw, dsth, true, true, this.USE_WORKER, callback);\n                resize.resize(photo);\n            }\n        }, {\n            key: 'resize',\n            value: function resize(photo, width, height, callback, isUp) {\n                var that = this;\n                var temp;\n                this._loadExif(photo);\n\n                // フラグ設定\n                isUp = isUp || false;\n\n                // 画像の縦横が異なる時、拡大、縮小先のx,yを入れ替える\n                if (this.isSwapSide()) {\n                    temp = width;\n                    width = height;\n                    height = temp;\n                }\n\n                // 処理する\n                var canvas = document.createElement('canvas');\n                var ctx = canvas.getContext('2d');\n                var image = new Image();\n                image.crossOrigin = \"Anonymous\";\n                image.onload = function (event) {\n                    var scale_w = 1;\n                    var scale_h = 1;\n                    var scale = 1;\n                    var scale_w_pixel = width;\n                    var scale_h_pixel = height;\n\n                    // 拡大率を算出\n                    scale_w = width / this.width;\n                    scale_h = height / this.height;\n\n                    // 小さい方を拡大、縮小率として採用する\n                    if (scale_w <= scale_h) {\n                        scale = scale_w;\n                        scale_w_pixel = width;\n                        scale_h_pixel = this.height * scale;\n                    } else {\n                        scale = scale_h;\n                        scale_w_pixel = this.width * scale;\n                        scale_h_pixel = height;\n                    }\n\n                    // 拡大の場合で、isUpがfalseであれば何もしない\n                    if (!isUp && scale >= 1) {\n                        callback(photo);\n                        return;\n                    }\n\n                    canvas.width = this.width;\n                    canvas.height = this.height;\n                    ctx.drawImage(this, 0, 0);\n                    that._JSImageResizer(ctx.getImageData(0, 0, this.width, this.height).data, this.width, this.height, scale_w_pixel, scale_h_pixel, function (buffer) {\n                        var tempcanvas = document.createElement('canvas');\n                        tempcanvas.width = scale_w_pixel;\n                        tempcanvas.height = scale_h_pixel;\n                        var tempcontext = tempcanvas.getContext('2d');\n                        that._updateCanvas(tempcontext, tempcontext.createImageData(scale_w_pixel, scale_h_pixel), buffer);\n\n                        // exifを更新して返す\n                        callback(that._setSize(that.exifObj, tempcanvas.toDataURL('image/jpeg'), scale_w_pixel, scale_h_pixel));\n                    });\n                };\n                image.src = photo;\n            }\n        }, {\n            key: '_setSize',\n            value: function _setSize(beforeexif, data, width, height) {\n                beforeexif['0th'][_piexif2.default.ImageIFD.ImageWidth] = width;\n                beforeexif['0th'][_piexif2.default.ImageIFD.ImageLength] = height;\n                beforeexif['Exif'][_piexif2.default.ExifIFD.PixelXDimension] = width;\n                beforeexif['Exif'][_piexif2.default.ExifIFD.PixelYDimension] = height;\n                var exifStr = _piexif2.default.dump(beforeexif);\n                return _piexif2.default.insert(exifStr, data);\n            }\n        }, {\n            key: '_updateCanvas',\n            value: function _updateCanvas(contextHandlePassed, imageBuffer, frameBuffer) {\n                var data = imageBuffer.data;\n                var length = data.length;\n                for (var x = 0; x < length; ++x) {\n                    data[x] = frameBuffer[x] & 0xFF;\n                }\n                contextHandlePassed.putImageData(imageBuffer, 0, 0);\n            }\n        }, {\n            key: 'getOrientation',\n            value: function getOrientation(exifObj) {\n                exifObj = exifObj || this.exifObj;\n                return exifObj['0th'][_piexif2.default.ImageIFD.Orientation] || 1;\n            }\n        }, {\n            key: 'exifHTML',\n            value: function exifHTML(exifObj) {\n                exifObj = exifObj || this.exifObj;\n                var output = \"\";\n                for (var ifd in exifObj) {\n                    if (ifd == \"thumbnail\") {\n                        continue;\n                    }\n                    output += \"-\" + ifd + \"<br>\";\n                    for (var tag in exifObj[ifd]) {\n                        output += \"  \" + _piexif2.default.TAGS[ifd][tag][\"name\"] + \":\" + exifObj[ifd][tag] + \"<br>\";\n                    }\n                }\n\n                return output;\n            }\n        }], [{\n            key: 'convDataURL2Binary',\n            value: function convDataURL2Binary(data) {\n                if (!data.startsWith('data:image/')) {\n                    return false;\n                }\n\n                var datas = data.split(',');\n                return window.atob(datas[1]);\n            }\n        }]);\n\n        return PhotoResize;\n    }();\n\n    exports.default = PhotoResize;\n\n    if (typeof window != \"undefined\") {\n        !window.PhotoResize && (window.PhotoResize = PhotoResize);\n    }\n});\n\n},{\"./plugins/piexif\":2,\"./plugins/resize\":3}],2:[function(require,module,exports){\n(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"module\", \"exports\"], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(module, exports);\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod, mod.exports);\n        global.piexif = mod.exports;\n    }\n})(this, function (module, exports) {\n    \"use strict\";\n\n    /* piexifjs\n    \n    The MIT License (MIT)\n    \n    Copyright (c) 2014, 2015 hMatoba(https://github.com/hMatoba)\n    \n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n    \n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n    \n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n    */\n\n    (function () {\n        \"use strict\";\n\n        var that = {};\n\n        that.remove = function (jpeg) {\n            var b64 = false;\n            if (jpeg.slice(0, 2) == \"\\xff\\xd8\") {} else if (jpeg.slice(0, 23) == \"data:image/jpeg;base64,\" || jpeg.slice(0, 22) == \"data:image/jpg;base64,\") {\n                jpeg = atob(jpeg.split(\",\")[1]);\n                b64 = true;\n            } else {\n                throw \"Given data is not jpeg.\";\n            }\n\n            var segments = splitIntoSegments(jpeg);\n            if (segments[1].slice(0, 2) == \"\\xff\\xe1\" && segments[1].slice(4, 10) == \"Exif\\x00\\x00\") {\n                segments = [segments[0]].concat(segments.slice(2));\n            } else if (segments[2].slice(0, 2) == \"\\xff\\xe1\" && segments[2].slice(4, 10) == \"Exif\\x00\\x00\") {\n                segments = segments.slice(0, 2).concat(segments.slice(3));\n            } else {\n                throw \"Exif not found.\";\n            }\n\n            var new_data = segments.join(\"\");\n            if (b64) {\n                new_data = \"data:image/jpeg;base64,\" + btoa(new_data);\n            }\n\n            return new_data;\n        };\n\n        that.insert = function (exif, jpeg) {\n            var b64 = false;\n            if (exif.slice(0, 6) != \"\\x45\\x78\\x69\\x66\\x00\\x00\") {\n                throw \"Given data is not exif.\";\n            }\n            if (jpeg.slice(0, 2) == \"\\xff\\xd8\") {} else if (jpeg.slice(0, 23) == \"data:image/jpeg;base64,\" || jpeg.slice(0, 22) == \"data:image/jpg;base64,\") {\n                jpeg = atob(jpeg.split(\",\")[1]);\n                b64 = true;\n            } else {\n                throw \"Given data is not jpeg.\";\n            }\n\n            var exifStr = \"\\xff\\xe1\" + pack(\">H\", [exif.length + 2]) + exif;\n            var segments = splitIntoSegments(jpeg);\n            var new_data = mergeSegments(segments, exifStr);\n            if (b64) {\n                new_data = \"data:image/jpeg;base64,\" + btoa(new_data);\n            }\n\n            return new_data;\n        };\n\n        that.load = function (data) {\n            var input_data;\n            if (typeof data == \"string\") {\n                if (data.slice(0, 2) == \"\\xff\\xd8\") {\n                    input_data = data;\n                } else if (data.slice(0, 23) == \"data:image/jpeg;base64,\" || data.slice(0, 22) == \"data:image/jpeg;base64,\") {\n                    input_data = atob(data.split(\",\")[1]);\n                } else if (data.slice(0, 4) == \"Exif\") {\n                    input_data = data.slice(6);\n                } else {\n                    throw \"'load' gots invalid file data.\";\n                }\n            } else {\n                throw \"'load' gots invalid type argument.\";\n            }\n\n            var exifDict = {};\n            var exif_dict = {\n                \"0th\": {},\n                \"Exif\": {},\n                \"GPS\": {},\n                \"Interop\": {},\n                \"1st\": {},\n                \"thumbnail\": null\n            };\n            var exifReader = new ExifReader(input_data);\n            if (exifReader.tiftag === null) {\n                return exif_dict;\n            }\n\n            if (exifReader.tiftag.slice(0, 2) == \"\\x49\\x49\") {\n                exifReader.endian_mark = \"<\";\n            } else {\n                exifReader.endian_mark = \">\";\n            }\n\n            var pointer = unpack(exifReader.endian_mark + \"L\", exifReader.tiftag.slice(4, 8))[0];\n            exif_dict[\"0th\"] = exifReader.get_ifd(pointer, \"0th\");\n\n            var first_ifd_pointer = exif_dict[\"0th\"][\"first_ifd_pointer\"];\n            delete exif_dict[\"0th\"][\"first_ifd_pointer\"];\n\n            if (34665 in exif_dict[\"0th\"]) {\n                pointer = exif_dict[\"0th\"][34665];\n                exif_dict[\"Exif\"] = exifReader.get_ifd(pointer, \"Exif\");\n            }\n            if (34853 in exif_dict[\"0th\"]) {\n                pointer = exif_dict[\"0th\"][34853];\n                exif_dict[\"GPS\"] = exifReader.get_ifd(pointer, \"GPS\");\n            }\n            if (40965 in exif_dict[\"Exif\"]) {\n                pointer = exif_dict[\"Exif\"][40965];\n                exif_dict[\"Interop\"] = exifReader.get_ifd(pointer, \"Interop\");\n            }\n            if (first_ifd_pointer != \"\\x00\\x00\\x00\\x00\") {\n                pointer = unpack(exifReader.endian_mark + \"L\", first_ifd_pointer)[0];\n                exif_dict[\"1st\"] = exifReader.get_ifd(pointer, \"1st\");\n                if (513 in exif_dict[\"1st\"] && 514 in exif_dict[\"1st\"]) {\n                    var end = exif_dict[\"1st\"][513] + exif_dict[\"1st\"][514];\n                    var thumb = exifReader.tiftag.slice(exif_dict[\"1st\"][513], end);\n                    exif_dict[\"thumbnail\"] = thumb;\n                }\n            }\n\n            return exif_dict;\n        };\n\n        that.dump = function (exif_dict_original) {\n            var TIFF_HEADER_LENGTH = 8;\n\n            var exif_dict = copy(exif_dict_original);\n            var header = \"Exif\\x00\\x00\\x4d\\x4d\\x00\\x2a\\x00\\x00\\x00\\x08\";\n            var exif_is = false;\n            var gps_is = false;\n            var interop_is = false;\n            var first_is = false;\n\n            var zeroth_ifd, exif_ifd, interop_ifd, gps_ifd, first_ifd;\n            if (\"0th\" in exif_dict) {\n                zeroth_ifd = exif_dict[\"0th\"];\n            } else {\n                zeroth_ifd = {};\n            }\n            if (\"Exif\" in exif_dict && Object.keys(exif_dict[\"Exif\"]).length || \"Interop\" in exif_dict && Object.keys(exif_dict[\"Interop\"]).length) {\n                zeroth_ifd[34665] = 1;\n                exif_is = true;\n                exif_ifd = exif_dict[\"Exif\"];\n                if (\"Interop\" in exif_dict && Object.keys(exif_dict[\"Interop\"]).length) {\n                    exif_ifd[40965] = 1;\n                    interop_is = true;\n                    interop_ifd = exif_dict[\"Interop\"];\n                }\n            }\n            if (\"GPS\" in exif_dict && Object.keys(exif_dict[\"GPS\"]).length) {\n                zeroth_ifd[34853] = 1;\n                gps_is = true;\n                gps_ifd = exif_dict[\"GPS\"];\n            }\n            if (\"1st\" in exif_dict && \"thumbnail\" in exif_dict && exif_dict[\"thumbnail\"] != null) {\n                first_is = true;\n                exif_dict[\"1st\"][513] = 1;\n                exif_dict[\"1st\"][514] = 1;\n                first_ifd = exif_dict[\"1st\"];\n            }\n\n            var zeroth_set = _dict_to_bytes(zeroth_ifd, \"0th\", 0);\n            var zeroth_length = zeroth_set[0].length + exif_is * 12 + gps_is * 12 + 4 + zeroth_set[1].length;\n\n            var exif_set,\n                exif_bytes = \"\",\n                exif_length = 0,\n                gps_set,\n                gps_bytes = \"\",\n                gps_length = 0,\n                interop_set,\n                interop_bytes = \"\",\n                interop_length = 0,\n                first_set,\n                first_bytes = \"\",\n                thumbnail;\n            if (exif_is) {\n                exif_set = _dict_to_bytes(exif_ifd, \"Exif\", zeroth_length);\n                exif_length = exif_set[0].length + interop_is * 12 + exif_set[1].length;\n            }\n            if (gps_is) {\n                gps_set = _dict_to_bytes(gps_ifd, \"GPS\", zeroth_length + exif_length);\n                gps_bytes = gps_set.join(\"\");\n                gps_length = gps_bytes.length;\n            }\n            if (interop_is) {\n                var offset = zeroth_length + exif_length + gps_length;\n                interop_set = _dict_to_bytes(interop_ifd, \"Interop\", offset);\n                interop_bytes = interop_set.join(\"\");\n                interop_length = interop_bytes.length;\n            }\n            if (first_is) {\n                var offset = zeroth_length + exif_length + gps_length + interop_length;\n                first_set = _dict_to_bytes(first_ifd, \"1st\", offset);\n                thumbnail = _get_thumbnail(exif_dict[\"thumbnail\"]);\n                if (thumbnail.length > 64000) {\n                    throw \"Given thumbnail is too large. max 64kB\";\n                }\n            }\n\n            var exif_pointer = \"\",\n                gps_pointer = \"\",\n                interop_pointer = \"\",\n                first_ifd_pointer = \"\\x00\\x00\\x00\\x00\";\n            if (exif_is) {\n                var pointer_value = TIFF_HEADER_LENGTH + zeroth_length;\n                var pointer_str = pack(\">L\", [pointer_value]);\n                var key = 34665;\n                var key_str = pack(\">H\", [key]);\n                var type_str = pack(\">H\", [TYPES[\"Long\"]]);\n                var length_str = pack(\">L\", [1]);\n                exif_pointer = key_str + type_str + length_str + pointer_str;\n            }\n            if (gps_is) {\n                var pointer_value = TIFF_HEADER_LENGTH + zeroth_length + exif_length;\n                var pointer_str = pack(\">L\", [pointer_value]);\n                var key = 34853;\n                var key_str = pack(\">H\", [key]);\n                var type_str = pack(\">H\", [TYPES[\"Long\"]]);\n                var length_str = pack(\">L\", [1]);\n                gps_pointer = key_str + type_str + length_str + pointer_str;\n            }\n            if (interop_is) {\n                var pointer_value = TIFF_HEADER_LENGTH + zeroth_length + exif_length + gps_length;\n                var pointer_str = pack(\">L\", [pointer_value]);\n                var key = 40965;\n                var key_str = pack(\">H\", [key]);\n                var type_str = pack(\">H\", [TYPES[\"Long\"]]);\n                var length_str = pack(\">L\", [1]);\n                interop_pointer = key_str + type_str + length_str + pointer_str;\n            }\n            if (first_is) {\n                var pointer_value = TIFF_HEADER_LENGTH + zeroth_length + exif_length + gps_length + interop_length;\n                first_ifd_pointer = pack(\">L\", [pointer_value]);\n                var thumbnail_pointer = pointer_value + first_set[0].length + 24 + 4 + first_set[1].length;\n                var thumbnail_p_bytes = \"\\x02\\x01\\x00\\x04\\x00\\x00\\x00\\x01\" + pack(\">L\", [thumbnail_pointer]);\n                var thumbnail_length_bytes = \"\\x02\\x02\\x00\\x04\\x00\\x00\\x00\\x01\" + pack(\">L\", [thumbnail.length]);\n                first_bytes = first_set[0] + thumbnail_p_bytes + thumbnail_length_bytes + \"\\x00\\x00\\x00\\x00\" + first_set[1] + thumbnail;\n            }\n\n            var zeroth_bytes = zeroth_set[0] + exif_pointer + gps_pointer + first_ifd_pointer + zeroth_set[1];\n            if (exif_is) {\n                exif_bytes = exif_set[0] + interop_pointer + exif_set[1];\n            }\n\n            return header + zeroth_bytes + exif_bytes + gps_bytes + interop_bytes + first_bytes;\n        };\n\n        function copy(obj) {\n            return JSON.parse(JSON.stringify(obj));\n        }\n\n        function _get_thumbnail(jpeg) {\n            var segments = splitIntoSegments(jpeg);\n            while (\"\\xff\\xe0\" <= segments[1].slice(0, 2) && segments[1].slice(0, 2) <= \"\\xff\\xef\") {\n                segments = [segments[0]].concat(segments.slice(2));\n            }\n            return segments.join(\"\");\n        }\n\n        function _pack_byte(array) {\n            return pack(\">\" + nStr(\"B\", array.length), array);\n        }\n\n        function _pack_short(array) {\n            return pack(\">\" + nStr(\"H\", array.length), array);\n        }\n\n        function _pack_long(array) {\n            return pack(\">\" + nStr(\"L\", array.length), array);\n        }\n\n        function _value_to_bytes(raw_value, value_type, offset) {\n            var four_bytes_over = \"\";\n            var value_str = \"\";\n            var length, new_value, num, den;\n\n            if (value_type == \"Byte\") {\n                length = raw_value.length;\n                if (length <= 4) {\n                    value_str = _pack_byte(raw_value) + nStr(\"\\x00\", 4 - length);\n                } else {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = _pack_byte(raw_value);\n                }\n            } else if (value_type == \"Short\") {\n                length = raw_value.length;\n                if (length <= 2) {\n                    value_str = _pack_short(raw_value) + nStr(\"\\x00\\x00\", 2 - length);\n                } else {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = _pack_short(raw_value);\n                }\n            } else if (value_type == \"Long\") {\n                length = raw_value.length;\n                if (length <= 1) {\n                    value_str = _pack_long(raw_value);\n                } else {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = _pack_long(raw_value);\n                }\n            } else if (value_type == \"Ascii\") {\n                new_value = raw_value + \"\\x00\";\n                length = new_value.length;\n                if (length > 4) {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = new_value;\n                } else {\n                    value_str = new_value + nStr(\"\\x00\", 4 - length);\n                }\n            } else if (value_type == \"Rational\") {\n                if (typeof raw_value[0] == \"number\") {\n                    length = 1;\n                    num = raw_value[0];\n                    den = raw_value[1];\n                    new_value = pack(\">L\", [num]) + pack(\">L\", [den]);\n                } else {\n                    length = raw_value.length;\n                    new_value = \"\";\n                    for (var n = 0; n < length; n++) {\n                        num = raw_value[n][0];\n                        den = raw_value[n][1];\n                        new_value += pack(\">L\", [num]) + pack(\">L\", [den]);\n                    }\n                }\n                value_str = pack(\">L\", [offset]);\n                four_bytes_over = new_value;\n            } else if (value_type == \"SRational\") {\n                if (typeof raw_value[0] == \"number\") {\n                    length = 1;\n                    num = raw_value[0];\n                    den = raw_value[1];\n                    new_value = pack(\">l\", [num]) + pack(\">l\", [den]);\n                } else {\n                    length = raw_value.length;\n                    new_value = \"\";\n                    for (var n = 0; n < length; n++) {\n                        num = raw_value[n][0];\n                        den = raw_value[n][1];\n                        new_value += pack(\">l\", [num]) + pack(\">l\", [den]);\n                    }\n                }\n                value_str = pack(\">L\", [offset]);\n                four_bytes_over = new_value;\n            } else if (value_type == \"Undefined\") {\n                length = raw_value.length;\n                if (length > 4) {\n                    value_str = pack(\">L\", [offset]);\n                    four_bytes_over = raw_value;\n                } else {\n                    value_str = raw_value + nStr(\"\\x00\", 4 - length);\n                }\n            }\n\n            var length_str = pack(\">L\", [length]);\n\n            return [length_str, value_str, four_bytes_over];\n        }\n\n        function _dict_to_bytes(ifd_dict, ifd, ifd_offset) {\n            var TIFF_HEADER_LENGTH = 8;\n            var tag_count = Object.keys(ifd_dict).length;\n            var entry_header = pack(\">H\", [tag_count]);\n            var entries_length;\n            if ([\"0th\", \"1st\"].indexOf(ifd) > -1) {\n                entries_length = 2 + tag_count * 12 + 4;\n            } else {\n                entries_length = 2 + tag_count * 12;\n            }\n            var entries = \"\";\n            var values = \"\";\n            var key;\n\n            for (var key in ifd_dict) {\n                if (typeof key == \"string\") {\n                    key = parseInt(key);\n                }\n                if (ifd == \"0th\" && [34665, 34853].indexOf(key) > -1) {\n                    continue;\n                } else if (ifd == \"Exif\" && key == 40965) {\n                    continue;\n                } else if (ifd == \"1st\" && [513, 514].indexOf(key) > -1) {\n                    continue;\n                }\n\n                var raw_value = ifd_dict[key];\n                var key_str = pack(\">H\", [key]);\n                var value_type = TAGS[ifd][key][\"type\"];\n                var type_str = pack(\">H\", [TYPES[value_type]]);\n\n                if (typeof raw_value == \"number\") {\n                    raw_value = [raw_value];\n                }\n                var offset = TIFF_HEADER_LENGTH + entries_length + ifd_offset + values.length;\n                var b = _value_to_bytes(raw_value, value_type, offset);\n                var length_str = b[0];\n                var value_str = b[1];\n                var four_bytes_over = b[2];\n\n                entries += key_str + type_str + length_str + value_str;\n                values += four_bytes_over;\n            }\n\n            return [entry_header + entries, values];\n        }\n\n        function ExifReader(data) {\n            var segments, app1;\n            if (data.slice(0, 2) == \"\\xff\\xd8\") {\n                // JPEG\n                segments = splitIntoSegments(data);\n                app1 = getExifSeg(segments);\n                if (app1) {\n                    this.tiftag = app1.slice(10);\n                } else {\n                    this.tiftag = null;\n                }\n            } else if ([\"\\x49\\x49\", \"\\x4d\\x4d\"].indexOf(data.slice(0, 2)) > -1) {\n                // TIFF\n                this.tiftag = data;\n            } else if (data.slice(0, 4) == \"Exif\") {\n                // Exif\n                this.tiftag = data.slice(6);\n            } else {\n                throw \"Given file is neither JPEG nor TIFF.\";\n            }\n        }\n\n        ExifReader.prototype = {\n            get_ifd: function get_ifd(pointer, ifd_name) {\n                var ifd_dict = {};\n                var tag_count = unpack(this.endian_mark + \"H\", this.tiftag.slice(pointer, pointer + 2))[0];\n                var offset = pointer + 2;\n                var t;\n                if ([\"0th\", \"1st\"].indexOf(ifd_name) > -1) {\n                    t = \"Image\";\n                } else {\n                    t = ifd_name;\n                }\n\n                for (var x = 0; x < tag_count; x++) {\n                    pointer = offset + 12 * x;\n                    var tag = unpack(this.endian_mark + \"H\", this.tiftag.slice(pointer, pointer + 2))[0];\n                    var value_type = unpack(this.endian_mark + \"H\", this.tiftag.slice(pointer + 2, pointer + 4))[0];\n                    var value_num = unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer + 4, pointer + 8))[0];\n                    var value = this.tiftag.slice(pointer + 8, pointer + 12);\n\n                    var v_set = [value_type, value_num, value];\n                    if (tag in TAGS[t]) {\n                        ifd_dict[tag] = this.convert_value(v_set);\n                    }\n                }\n\n                if (ifd_name == \"0th\") {\n                    pointer = offset + 12 * tag_count;\n                    ifd_dict[\"first_ifd_pointer\"] = this.tiftag.slice(pointer, pointer + 4);\n                }\n\n                return ifd_dict;\n            },\n\n            convert_value: function convert_value(val) {\n                var data = null;\n                var t = val[0];\n                var length = val[1];\n                var value = val[2];\n                var pointer;\n\n                if (t == 1) {\n                    // BYTE\n                    if (length > 4) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = unpack(this.endian_mark + nStr(\"B\", length), this.tiftag.slice(pointer, pointer + length));\n                    } else {\n                        data = unpack(this.endian_mark + nStr(\"B\", length), value.slice(0, length));\n                    }\n                } else if (t == 2) {\n                    // ASCII\n                    if (length > 4) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = this.tiftag.slice(pointer, pointer + length - 1);\n                    } else {\n                        data = value.slice(0, length - 1);\n                    }\n                } else if (t == 3) {\n                    // SHORT\n                    if (length > 2) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = unpack(this.endian_mark + nStr(\"H\", length), this.tiftag.slice(pointer, pointer + length * 2));\n                    } else {\n                        data = unpack(this.endian_mark + nStr(\"H\", length), value.slice(0, length * 2));\n                    }\n                } else if (t == 4) {\n                    // LONG\n                    if (length > 1) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = unpack(this.endian_mark + nStr(\"L\", length), this.tiftag.slice(pointer, pointer + length * 4));\n                    } else {\n                        data = unpack(this.endian_mark + nStr(\"L\", length), value);\n                    }\n                } else if (t == 5) {\n                    // RATIONAL\n                    pointer = unpack(this.endian_mark + \"L\", value)[0];\n                    if (length > 1) {\n                        data = [];\n                        for (var x = 0; x < length; x++) {\n                            data.push([unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer + x * 8, pointer + 4 + x * 8))[0], unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer + 4 + x * 8, pointer + 8 + x * 8))[0]]);\n                        }\n                    } else {\n                        data = [unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer, pointer + 4))[0], unpack(this.endian_mark + \"L\", this.tiftag.slice(pointer + 4, pointer + 8))[0]];\n                    }\n                } else if (t == 7) {\n                    // UNDEFINED BYTES\n                    if (length > 4) {\n                        pointer = unpack(this.endian_mark + \"L\", value)[0];\n                        data = this.tiftag.slice(pointer, pointer + length);\n                    } else {\n                        data = value.slice(0, length);\n                    }\n                } else if (t == 10) {\n                    // SRATIONAL\n                    pointer = unpack(this.endian_mark + \"L\", value)[0];\n                    if (length > 1) {\n                        data = [];\n                        for (var x = 0; x < length; x++) {\n                            data.push([unpack(this.endian_mark + \"l\", this.tiftag.slice(pointer + x * 8, pointer + 4 + x * 8))[0], unpack(this.endian_mark + \"l\", this.tiftag.slice(pointer + 4 + x * 8, pointer + 8 + x * 8))[0]]);\n                        }\n                    } else {\n                        data = [unpack(this.endian_mark + \"l\", this.tiftag.slice(pointer, pointer + 4))[0], unpack(this.endian_mark + \"l\", this.tiftag.slice(pointer + 4, pointer + 8))[0]];\n                    }\n                } else {\n                    throw \"Exif might be wrong. Got incorrect value \" + \"type to decode. type:\" + t;\n                }\n\n                if (data instanceof Array && data.length == 1) {\n                    return data[0];\n                } else {\n                    return data;\n                }\n            }\n        };\n\n        if (typeof btoa === \"undefined\") {\n            var btoa = function btoa(input) {\n                var output = \"\";\n                var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n                var i = 0;\n                var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n                while (i < input.length) {\n\n                    chr1 = input.charCodeAt(i++);\n                    chr2 = input.charCodeAt(i++);\n                    chr3 = input.charCodeAt(i++);\n\n                    enc1 = chr1 >> 2;\n                    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n                    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n                    enc4 = chr3 & 63;\n\n                    if (isNaN(chr2)) {\n                        enc3 = enc4 = 64;\n                    } else if (isNaN(chr3)) {\n                        enc4 = 64;\n                    }\n\n                    output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n                }\n\n                return output;\n            };\n        }\n\n        if (typeof atob === \"undefined\") {\n            var atob = function atob(input) {\n                var output = \"\";\n                var chr1, chr2, chr3;\n                var enc1, enc2, enc3, enc4;\n                var i = 0;\n                var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n                input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n                while (i < input.length) {\n\n                    enc1 = keyStr.indexOf(input.charAt(i++));\n                    enc2 = keyStr.indexOf(input.charAt(i++));\n                    enc3 = keyStr.indexOf(input.charAt(i++));\n                    enc4 = keyStr.indexOf(input.charAt(i++));\n\n                    chr1 = enc1 << 2 | enc2 >> 4;\n                    chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n                    chr3 = (enc3 & 3) << 6 | enc4;\n\n                    output = output + String.fromCharCode(chr1);\n\n                    if (enc3 != 64) {\n                        output = output + String.fromCharCode(chr2);\n                    }\n                    if (enc4 != 64) {\n                        output = output + String.fromCharCode(chr3);\n                    }\n                }\n\n                return output;\n            };\n        }\n\n        function getImageSize(imageArray) {\n            var segments = slice2Segments(imageArray);\n            var seg,\n                width,\n                height,\n                SOF = [192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 205, 206, 207];\n\n            for (var x = 0; x < segments.length; x++) {\n                seg = segments[x];\n                if (SOF.indexOf(seg[1]) >= 0) {\n                    height = seg[5] * 256 + seg[6];\n                    width = seg[7] * 256 + seg[8];\n                    break;\n                }\n            }\n            return [width, height];\n        }\n\n        function pack(mark, array) {\n            if (!(array instanceof Array)) {\n                throw \"'pack' error. Got invalid type argument.\";\n            }\n            if (mark.length - 1 != array.length) {\n                throw \"'pack' error. \" + (mark.length - 1) + \" marks, \" + array.length + \" elements.\";\n            }\n\n            var littleEndian;\n            if (mark[0] == \"<\") {\n                littleEndian = true;\n            } else if (mark[0] == \">\") {\n                littleEndian = false;\n            } else {\n                throw \"\";\n            }\n            var packed = \"\";\n            var p = 1;\n            var val = null;\n            var c = null;\n            var valStr = null;\n\n            while (c = mark[p]) {\n                if (c.toLowerCase() == \"b\") {\n                    val = array[p - 1];\n                    if (c == \"b\" && val < 0) {\n                        val += 0x100;\n                    }\n                    if (val > 0xff || val < 0) {\n                        throw \"'pack' error.\";\n                    } else {\n                        valStr = String.fromCharCode(val);\n                    }\n                } else if (c == \"H\") {\n                    val = array[p - 1];\n                    if (val > 0xffff || val < 0) {\n                        throw \"'pack' error.\";\n                    } else {\n                        valStr = String.fromCharCode(Math.floor(val % 0x10000 / 0x100)) + String.fromCharCode(val % 0x100);\n                        if (littleEndian) {\n                            valStr = valStr.split(\"\").reverse().join(\"\");\n                        }\n                    }\n                } else if (c.toLowerCase() == \"l\") {\n                    val = array[p - 1];\n                    if (c == \"l\" && val < 0) {\n                        val += 0x100000000;\n                    }\n                    if (val > 0xffffffff || val < 0) {\n                        throw \"'pack' error.\";\n                    } else {\n                        valStr = String.fromCharCode(Math.floor(val / 0x1000000)) + String.fromCharCode(Math.floor(val % 0x1000000 / 0x10000)) + String.fromCharCode(Math.floor(val % 0x10000 / 0x100)) + String.fromCharCode(val % 0x100);\n                        if (littleEndian) {\n                            valStr = valStr.split(\"\").reverse().join(\"\");\n                        }\n                    }\n                } else {\n                    throw \"'pack' error.\";\n                }\n\n                packed += valStr;\n                p += 1;\n            }\n\n            return packed;\n        }\n\n        function unpack(mark, str) {\n            if (typeof str != \"string\") {\n                throw \"'unpack' error. Got invalid type argument.\";\n            }\n            var l = 0;\n            for (var markPointer = 1; markPointer < mark.length; markPointer++) {\n                if (mark[markPointer].toLowerCase() == \"b\") {\n                    l += 1;\n                } else if (mark[markPointer].toLowerCase() == \"h\") {\n                    l += 2;\n                } else if (mark[markPointer].toLowerCase() == \"l\") {\n                    l += 4;\n                } else {\n                    throw \"'unpack' error. Got invalid mark.\";\n                }\n            }\n\n            if (l != str.length) {\n                throw \"'unpack' error. Mismatch between symbol and string length. \" + l + \":\" + str.length;\n            }\n\n            var littleEndian;\n            if (mark[0] == \"<\") {\n                littleEndian = true;\n            } else if (mark[0] == \">\") {\n                littleEndian = false;\n            } else {\n                throw \"'unpack' error.\";\n            }\n            var unpacked = [];\n            var strPointer = 0;\n            var p = 1;\n            var val = null;\n            var c = null;\n            var length = null;\n            var sliced = \"\";\n\n            while (c = mark[p]) {\n                if (c.toLowerCase() == \"b\") {\n                    length = 1;\n                    sliced = str.slice(strPointer, strPointer + length);\n                    val = sliced.charCodeAt(0);\n                    if (c == \"b\" && val >= 0x80) {\n                        val -= 0x100;\n                    }\n                } else if (c == \"H\") {\n                    length = 2;\n                    sliced = str.slice(strPointer, strPointer + length);\n                    if (littleEndian) {\n                        sliced = sliced.split(\"\").reverse().join(\"\");\n                    }\n                    val = sliced.charCodeAt(0) * 0x100 + sliced.charCodeAt(1);\n                } else if (c.toLowerCase() == \"l\") {\n                    length = 4;\n                    sliced = str.slice(strPointer, strPointer + length);\n                    if (littleEndian) {\n                        sliced = sliced.split(\"\").reverse().join(\"\");\n                    }\n                    val = sliced.charCodeAt(0) * 0x1000000 + sliced.charCodeAt(1) * 0x10000 + sliced.charCodeAt(2) * 0x100 + sliced.charCodeAt(3);\n                    if (c == \"l\" && val >= 0x80000000) {\n                        val -= 0x100000000;\n                    }\n                } else {\n                    throw \"'unpack' error. \" + c;\n                }\n\n                unpacked.push(val);\n                strPointer += length;\n                p += 1;\n            }\n\n            return unpacked;\n        }\n\n        function nStr(ch, num) {\n            var str = \"\";\n            for (var i = 0; i < num; i++) {\n                str += ch;\n            }\n            return str;\n        }\n\n        function splitIntoSegments(data) {\n            if (data.slice(0, 2) != \"\\xff\\xd8\") {\n                throw \"Given data isn't JPEG.\";\n            }\n\n            var head = 2;\n            var segments = [\"\\xff\\xd8\"];\n            while (true) {\n                if (data.slice(head, head + 2) == \"\\xff\\xda\") {\n                    segments.push(data.slice(head));\n                    break;\n                } else {\n                    var length = unpack(\">H\", data.slice(head + 2, head + 4))[0];\n                    var endPoint = head + length + 2;\n                    segments.push(data.slice(head, endPoint));\n                    head = endPoint;\n                }\n\n                if (head >= data.length) {\n                    throw \"Wrong JPEG data.\";\n                }\n            }\n            return segments;\n        }\n\n        function getExifSeg(segments) {\n            var seg;\n            for (var i = 0; i < segments.length; i++) {\n                seg = segments[i];\n                if (seg.slice(0, 2) == \"\\xff\\xe1\" && seg.slice(4, 10) == \"Exif\\x00\\x00\") {\n                    return seg;\n                }\n            }\n            return null;\n        }\n\n        function mergeSegments(segments, exif) {\n\n            if (segments[1].slice(0, 2) == \"\\xff\\xe0\" && segments[2].slice(0, 2) == \"\\xff\\xe1\" && segments[2].slice(4, 10) == \"Exif\\x00\\x00\") {\n                if (exif) {\n                    segments[2] = exif;\n                    segments = [\"\\xff\\xd8\"].concat(segments.slice(2));\n                } else if (exif == null) {\n                    segments = segments.slice(0, 2).concat(segments.slice(3));\n                } else {\n                    segments = segments.slice(0).concat(segments.slice(2));\n                }\n            } else if (segments[1].slice(0, 2) == \"\\xff\\xe0\") {\n                if (exif) {\n                    segments[1] = exif;\n                }\n            } else if (segments[1].slice(0, 2) == \"\\xff\\xe1\" && segments[1].slice(4, 10) == \"Exif\\x00\\x00\") {\n                if (exif) {\n                    segments[1] = exif;\n                } else if (exif == null) {\n                    segments = segments.slice(0).concat(segments.slice(2));\n                }\n            } else {\n                if (exif) {\n                    segments = [segments[0], exif].concat(segments.slice(1));\n                }\n            }\n\n            return segments.join(\"\");\n        }\n\n        function toHex(str) {\n            var hexStr = \"\";\n            for (var i = 0; i < str.length; i++) {\n                var h = str.charCodeAt(i);\n                var hex = (h < 10 ? \"0\" : \"\") + h.toString(16);\n                hexStr += hex + \" \";\n            }\n            return hexStr;\n        }\n\n        var TYPES = {\n            \"Byte\": 1,\n            \"Ascii\": 2,\n            \"Short\": 3,\n            \"Long\": 4,\n            \"Rational\": 5,\n            \"Undefined\": 7,\n            \"SLong\": 9,\n            \"SRational\": 10\n        };\n\n        var TAGS = {\n            'Image': {\n                11: {\n                    'name': 'ProcessingSoftware',\n                    'type': 'Ascii'\n                },\n                254: {\n                    'name': 'NewSubfileType',\n                    'type': 'Long'\n                },\n                255: {\n                    'name': 'SubfileType',\n                    'type': 'Short'\n                },\n                256: {\n                    'name': 'ImageWidth',\n                    'type': 'Long'\n                },\n                257: {\n                    'name': 'ImageLength',\n                    'type': 'Long'\n                },\n                258: {\n                    'name': 'BitsPerSample',\n                    'type': 'Short'\n                },\n                259: {\n                    'name': 'Compression',\n                    'type': 'Short'\n                },\n                262: {\n                    'name': 'PhotometricInterpretation',\n                    'type': 'Short'\n                },\n                263: {\n                    'name': 'Threshholding',\n                    'type': 'Short'\n                },\n                264: {\n                    'name': 'CellWidth',\n                    'type': 'Short'\n                },\n                265: {\n                    'name': 'CellLength',\n                    'type': 'Short'\n                },\n                266: {\n                    'name': 'FillOrder',\n                    'type': 'Short'\n                },\n                269: {\n                    'name': 'DocumentName',\n                    'type': 'Ascii'\n                },\n                270: {\n                    'name': 'ImageDescription',\n                    'type': 'Ascii'\n                },\n                271: {\n                    'name': 'Make',\n                    'type': 'Ascii'\n                },\n                272: {\n                    'name': 'Model',\n                    'type': 'Ascii'\n                },\n                273: {\n                    'name': 'StripOffsets',\n                    'type': 'Long'\n                },\n                274: {\n                    'name': 'Orientation',\n                    'type': 'Short'\n                },\n                277: {\n                    'name': 'SamplesPerPixel',\n                    'type': 'Short'\n                },\n                278: {\n                    'name': 'RowsPerStrip',\n                    'type': 'Long'\n                },\n                279: {\n                    'name': 'StripByteCounts',\n                    'type': 'Long'\n                },\n                282: {\n                    'name': 'XResolution',\n                    'type': 'Rational'\n                },\n                283: {\n                    'name': 'YResolution',\n                    'type': 'Rational'\n                },\n                284: {\n                    'name': 'PlanarConfiguration',\n                    'type': 'Short'\n                },\n                290: {\n                    'name': 'GrayResponseUnit',\n                    'type': 'Short'\n                },\n                291: {\n                    'name': 'GrayResponseCurve',\n                    'type': 'Short'\n                },\n                292: {\n                    'name': 'T4Options',\n                    'type': 'Long'\n                },\n                293: {\n                    'name': 'T6Options',\n                    'type': 'Long'\n                },\n                296: {\n                    'name': 'ResolutionUnit',\n                    'type': 'Short'\n                },\n                301: {\n                    'name': 'TransferFunction',\n                    'type': 'Short'\n                },\n                305: {\n                    'name': 'Software',\n                    'type': 'Ascii'\n                },\n                306: {\n                    'name': 'DateTime',\n                    'type': 'Ascii'\n                },\n                315: {\n                    'name': 'Artist',\n                    'type': 'Ascii'\n                },\n                316: {\n                    'name': 'HostComputer',\n                    'type': 'Ascii'\n                },\n                317: {\n                    'name': 'Predictor',\n                    'type': 'Short'\n                },\n                318: {\n                    'name': 'WhitePoint',\n                    'type': 'Rational'\n                },\n                319: {\n                    'name': 'PrimaryChromaticities',\n                    'type': 'Rational'\n                },\n                320: {\n                    'name': 'ColorMap',\n                    'type': 'Short'\n                },\n                321: {\n                    'name': 'HalftoneHints',\n                    'type': 'Short'\n                },\n                322: {\n                    'name': 'TileWidth',\n                    'type': 'Short'\n                },\n                323: {\n                    'name': 'TileLength',\n                    'type': 'Short'\n                },\n                324: {\n                    'name': 'TileOffsets',\n                    'type': 'Short'\n                },\n                325: {\n                    'name': 'TileByteCounts',\n                    'type': 'Short'\n                },\n                330: {\n                    'name': 'SubIFDs',\n                    'type': 'Long'\n                },\n                332: {\n                    'name': 'InkSet',\n                    'type': 'Short'\n                },\n                333: {\n                    'name': 'InkNames',\n                    'type': 'Ascii'\n                },\n                334: {\n                    'name': 'NumberOfInks',\n                    'type': 'Short'\n                },\n                336: {\n                    'name': 'DotRange',\n                    'type': 'Byte'\n                },\n                337: {\n                    'name': 'TargetPrinter',\n                    'type': 'Ascii'\n                },\n                338: {\n                    'name': 'ExtraSamples',\n                    'type': 'Short'\n                },\n                339: {\n                    'name': 'SampleFormat',\n                    'type': 'Short'\n                },\n                340: {\n                    'name': 'SMinSampleValue',\n                    'type': 'Short'\n                },\n                341: {\n                    'name': 'SMaxSampleValue',\n                    'type': 'Short'\n                },\n                342: {\n                    'name': 'TransferRange',\n                    'type': 'Short'\n                },\n                343: {\n                    'name': 'ClipPath',\n                    'type': 'Byte'\n                },\n                344: {\n                    'name': 'XClipPathUnits',\n                    'type': 'Long'\n                },\n                345: {\n                    'name': 'YClipPathUnits',\n                    'type': 'Long'\n                },\n                346: {\n                    'name': 'Indexed',\n                    'type': 'Short'\n                },\n                347: {\n                    'name': 'JPEGTables',\n                    'type': 'Undefined'\n                },\n                351: {\n                    'name': 'OPIProxy',\n                    'type': 'Short'\n                },\n                512: {\n                    'name': 'JPEGProc',\n                    'type': 'Long'\n                },\n                513: {\n                    'name': 'JPEGInterchangeFormat',\n                    'type': 'Long'\n                },\n                514: {\n                    'name': 'JPEGInterchangeFormatLength',\n                    'type': 'Long'\n                },\n                515: {\n                    'name': 'JPEGRestartInterval',\n                    'type': 'Short'\n                },\n                517: {\n                    'name': 'JPEGLosslessPredictors',\n                    'type': 'Short'\n                },\n                518: {\n                    'name': 'JPEGPointTransforms',\n                    'type': 'Short'\n                },\n                519: {\n                    'name': 'JPEGQTables',\n                    'type': 'Long'\n                },\n                520: {\n                    'name': 'JPEGDCTables',\n                    'type': 'Long'\n                },\n                521: {\n                    'name': 'JPEGACTables',\n                    'type': 'Long'\n                },\n                529: {\n                    'name': 'YCbCrCoefficients',\n                    'type': 'Rational'\n                },\n                530: {\n                    'name': 'YCbCrSubSampling',\n                    'type': 'Short'\n                },\n                531: {\n                    'name': 'YCbCrPositioning',\n                    'type': 'Short'\n                },\n                532: {\n                    'name': 'ReferenceBlackWhite',\n                    'type': 'Rational'\n                },\n                700: {\n                    'name': 'XMLPacket',\n                    'type': 'Byte'\n                },\n                18246: {\n                    'name': 'Rating',\n                    'type': 'Short'\n                },\n                18249: {\n                    'name': 'RatingPercent',\n                    'type': 'Short'\n                },\n                32781: {\n                    'name': 'ImageID',\n                    'type': 'Ascii'\n                },\n                33421: {\n                    'name': 'CFARepeatPatternDim',\n                    'type': 'Short'\n                },\n                33422: {\n                    'name': 'CFAPattern',\n                    'type': 'Byte'\n                },\n                33423: {\n                    'name': 'BatteryLevel',\n                    'type': 'Rational'\n                },\n                33432: {\n                    'name': 'Copyright',\n                    'type': 'Ascii'\n                },\n                33434: {\n                    'name': 'ExposureTime',\n                    'type': 'Rational'\n                },\n                34377: {\n                    'name': 'ImageResources',\n                    'type': 'Byte'\n                },\n                34665: {\n                    'name': 'ExifTag',\n                    'type': 'Long'\n                },\n                34675: {\n                    'name': 'InterColorProfile',\n                    'type': 'Undefined'\n                },\n                34853: {\n                    'name': 'GPSTag',\n                    'type': 'Long'\n                },\n                34857: {\n                    'name': 'Interlace',\n                    'type': 'Short'\n                },\n                34858: {\n                    'name': 'TimeZoneOffset',\n                    'type': 'Long'\n                },\n                34859: {\n                    'name': 'SelfTimerMode',\n                    'type': 'Short'\n                },\n                37387: {\n                    'name': 'FlashEnergy',\n                    'type': 'Rational'\n                },\n                37388: {\n                    'name': 'SpatialFrequencyResponse',\n                    'type': 'Undefined'\n                },\n                37389: {\n                    'name': 'Noise',\n                    'type': 'Undefined'\n                },\n                37390: {\n                    'name': 'FocalPlaneXResolution',\n                    'type': 'Rational'\n                },\n                37391: {\n                    'name': 'FocalPlaneYResolution',\n                    'type': 'Rational'\n                },\n                37392: {\n                    'name': 'FocalPlaneResolutionUnit',\n                    'type': 'Short'\n                },\n                37393: {\n                    'name': 'ImageNumber',\n                    'type': 'Long'\n                },\n                37394: {\n                    'name': 'SecurityClassification',\n                    'type': 'Ascii'\n                },\n                37395: {\n                    'name': 'ImageHistory',\n                    'type': 'Ascii'\n                },\n                37397: {\n                    'name': 'ExposureIndex',\n                    'type': 'Rational'\n                },\n                37398: {\n                    'name': 'TIFFEPStandardID',\n                    'type': 'Byte'\n                },\n                37399: {\n                    'name': 'SensingMethod',\n                    'type': 'Short'\n                },\n                40091: {\n                    'name': 'XPTitle',\n                    'type': 'Byte'\n                },\n                40092: {\n                    'name': 'XPComment',\n                    'type': 'Byte'\n                },\n                40093: {\n                    'name': 'XPAuthor',\n                    'type': 'Byte'\n                },\n                40094: {\n                    'name': 'XPKeywords',\n                    'type': 'Byte'\n                },\n                40095: {\n                    'name': 'XPSubject',\n                    'type': 'Byte'\n                },\n                50341: {\n                    'name': 'PrintImageMatching',\n                    'type': 'Undefined'\n                },\n                50706: {\n                    'name': 'DNGVersion',\n                    'type': 'Byte'\n                },\n                50707: {\n                    'name': 'DNGBackwardVersion',\n                    'type': 'Byte'\n                },\n                50708: {\n                    'name': 'UniqueCameraModel',\n                    'type': 'Ascii'\n                },\n                50709: {\n                    'name': 'LocalizedCameraModel',\n                    'type': 'Byte'\n                },\n                50710: {\n                    'name': 'CFAPlaneColor',\n                    'type': 'Byte'\n                },\n                50711: {\n                    'name': 'CFALayout',\n                    'type': 'Short'\n                },\n                50712: {\n                    'name': 'LinearizationTable',\n                    'type': 'Short'\n                },\n                50713: {\n                    'name': 'BlackLevelRepeatDim',\n                    'type': 'Short'\n                },\n                50714: {\n                    'name': 'BlackLevel',\n                    'type': 'Rational'\n                },\n                50715: {\n                    'name': 'BlackLevelDeltaH',\n                    'type': 'SRational'\n                },\n                50716: {\n                    'name': 'BlackLevelDeltaV',\n                    'type': 'SRational'\n                },\n                50717: {\n                    'name': 'WhiteLevel',\n                    'type': 'Short'\n                },\n                50718: {\n                    'name': 'DefaultScale',\n                    'type': 'Rational'\n                },\n                50719: {\n                    'name': 'DefaultCropOrigin',\n                    'type': 'Short'\n                },\n                50720: {\n                    'name': 'DefaultCropSize',\n                    'type': 'Short'\n                },\n                50721: {\n                    'name': 'ColorMatrix1',\n                    'type': 'SRational'\n                },\n                50722: {\n                    'name': 'ColorMatrix2',\n                    'type': 'SRational'\n                },\n                50723: {\n                    'name': 'CameraCalibration1',\n                    'type': 'SRational'\n                },\n                50724: {\n                    'name': 'CameraCalibration2',\n                    'type': 'SRational'\n                },\n                50725: {\n                    'name': 'ReductionMatrix1',\n                    'type': 'SRational'\n                },\n                50726: {\n                    'name': 'ReductionMatrix2',\n                    'type': 'SRational'\n                },\n                50727: {\n                    'name': 'AnalogBalance',\n                    'type': 'Rational'\n                },\n                50728: {\n                    'name': 'AsShotNeutral',\n                    'type': 'Short'\n                },\n                50729: {\n                    'name': 'AsShotWhiteXY',\n                    'type': 'Rational'\n                },\n                50730: {\n                    'name': 'BaselineExposure',\n                    'type': 'SRational'\n                },\n                50731: {\n                    'name': 'BaselineNoise',\n                    'type': 'Rational'\n                },\n                50732: {\n                    'name': 'BaselineSharpness',\n                    'type': 'Rational'\n                },\n                50733: {\n                    'name': 'BayerGreenSplit',\n                    'type': 'Long'\n                },\n                50734: {\n                    'name': 'LinearResponseLimit',\n                    'type': 'Rational'\n                },\n                50735: {\n                    'name': 'CameraSerialNumber',\n                    'type': 'Ascii'\n                },\n                50736: {\n                    'name': 'LensInfo',\n                    'type': 'Rational'\n                },\n                50737: {\n                    'name': 'ChromaBlurRadius',\n                    'type': 'Rational'\n                },\n                50738: {\n                    'name': 'AntiAliasStrength',\n                    'type': 'Rational'\n                },\n                50739: {\n                    'name': 'ShadowScale',\n                    'type': 'SRational'\n                },\n                50740: {\n                    'name': 'DNGPrivateData',\n                    'type': 'Byte'\n                },\n                50741: {\n                    'name': 'MakerNoteSafety',\n                    'type': 'Short'\n                },\n                50778: {\n                    'name': 'CalibrationIlluminant1',\n                    'type': 'Short'\n                },\n                50779: {\n                    'name': 'CalibrationIlluminant2',\n                    'type': 'Short'\n                },\n                50780: {\n                    'name': 'BestQualityScale',\n                    'type': 'Rational'\n                },\n                50781: {\n                    'name': 'RawDataUniqueID',\n                    'type': 'Byte'\n                },\n                50827: {\n                    'name': 'OriginalRawFileName',\n                    'type': 'Byte'\n                },\n                50828: {\n                    'name': 'OriginalRawFileData',\n                    'type': 'Undefined'\n                },\n                50829: {\n                    'name': 'ActiveArea',\n                    'type': 'Short'\n                },\n                50830: {\n                    'name': 'MaskedAreas',\n                    'type': 'Short'\n                },\n                50831: {\n                    'name': 'AsShotICCProfile',\n                    'type': 'Undefined'\n                },\n                50832: {\n                    'name': 'AsShotPreProfileMatrix',\n                    'type': 'SRational'\n                },\n                50833: {\n                    'name': 'CurrentICCProfile',\n                    'type': 'Undefined'\n                },\n                50834: {\n                    'name': 'CurrentPreProfileMatrix',\n                    'type': 'SRational'\n                },\n                50879: {\n                    'name': 'ColorimetricReference',\n                    'type': 'Short'\n                },\n                50931: {\n                    'name': 'CameraCalibrationSignature',\n                    'type': 'Byte'\n                },\n                50932: {\n                    'name': 'ProfileCalibrationSignature',\n                    'type': 'Byte'\n                },\n                50934: {\n                    'name': 'AsShotProfileName',\n                    'type': 'Byte'\n                },\n                50935: {\n                    'name': 'NoiseReductionApplied',\n                    'type': 'Rational'\n                },\n                50936: {\n                    'name': 'ProfileName',\n                    'type': 'Byte'\n                },\n                50937: {\n                    'name': 'ProfileHueSatMapDims',\n                    'type': 'Long'\n                },\n                50938: {\n                    'name': 'ProfileHueSatMapData1',\n                    'type': 'Float'\n                },\n                50939: {\n                    'name': 'ProfileHueSatMapData2',\n                    'type': 'Float'\n                },\n                50940: {\n                    'name': 'ProfileToneCurve',\n                    'type': 'Float'\n                },\n                50941: {\n                    'name': 'ProfileEmbedPolicy',\n                    'type': 'Long'\n                },\n                50942: {\n                    'name': 'ProfileCopyright',\n                    'type': 'Byte'\n                },\n                50964: {\n                    'name': 'ForwardMatrix1',\n                    'type': 'SRational'\n                },\n                50965: {\n                    'name': 'ForwardMatrix2',\n                    'type': 'SRational'\n                },\n                50966: {\n                    'name': 'PreviewApplicationName',\n                    'type': 'Byte'\n                },\n                50967: {\n                    'name': 'PreviewApplicationVersion',\n                    'type': 'Byte'\n                },\n                50968: {\n                    'name': 'PreviewSettingsName',\n                    'type': 'Byte'\n                },\n                50969: {\n                    'name': 'PreviewSettingsDigest',\n                    'type': 'Byte'\n                },\n                50970: {\n                    'name': 'PreviewColorSpace',\n                    'type': 'Long'\n                },\n                50971: {\n                    'name': 'PreviewDateTime',\n                    'type': 'Ascii'\n                },\n                50972: {\n                    'name': 'RawImageDigest',\n                    'type': 'Undefined'\n                },\n                50973: {\n                    'name': 'OriginalRawFileDigest',\n                    'type': 'Undefined'\n                },\n                50974: {\n                    'name': 'SubTileBlockSize',\n                    'type': 'Long'\n                },\n                50975: {\n                    'name': 'RowInterleaveFactor',\n                    'type': 'Long'\n                },\n                50981: {\n                    'name': 'ProfileLookTableDims',\n                    'type': 'Long'\n                },\n                50982: {\n                    'name': 'ProfileLookTableData',\n                    'type': 'Float'\n                },\n                51008: {\n                    'name': 'OpcodeList1',\n                    'type': 'Undefined'\n                },\n                51009: {\n                    'name': 'OpcodeList2',\n                    'type': 'Undefined'\n                },\n                51022: {\n                    'name': 'OpcodeList3',\n                    'type': 'Undefined'\n                }\n            },\n            'Exif': {\n                33434: {\n                    'name': 'ExposureTime',\n                    'type': 'Rational'\n                },\n                33437: {\n                    'name': 'FNumber',\n                    'type': 'Rational'\n                },\n                34850: {\n                    'name': 'ExposureProgram',\n                    'type': 'Short'\n                },\n                34852: {\n                    'name': 'SpectralSensitivity',\n                    'type': 'Ascii'\n                },\n                34855: {\n                    'name': 'ISOSpeedRatings',\n                    'type': 'Short'\n                },\n                34856: {\n                    'name': 'OECF',\n                    'type': 'Undefined'\n                },\n                34864: {\n                    'name': 'SensitivityType',\n                    'type': 'Short'\n                },\n                34865: {\n                    'name': 'StandardOutputSensitivity',\n                    'type': 'Long'\n                },\n                34866: {\n                    'name': 'RecommendedExposureIndex',\n                    'type': 'Long'\n                },\n                34867: {\n                    'name': 'ISOSpeed',\n                    'type': 'Long'\n                },\n                34868: {\n                    'name': 'ISOSpeedLatitudeyyy',\n                    'type': 'Long'\n                },\n                34869: {\n                    'name': 'ISOSpeedLatitudezzz',\n                    'type': 'Long'\n                },\n                36864: {\n                    'name': 'ExifVersion',\n                    'type': 'Undefined'\n                },\n                36867: {\n                    'name': 'DateTimeOriginal',\n                    'type': 'Ascii'\n                },\n                36868: {\n                    'name': 'DateTimeDigitized',\n                    'type': 'Ascii'\n                },\n                37121: {\n                    'name': 'ComponentsConfiguration',\n                    'type': 'Undefined'\n                },\n                37122: {\n                    'name': 'CompressedBitsPerPixel',\n                    'type': 'Rational'\n                },\n                37377: {\n                    'name': 'ShutterSpeedValue',\n                    'type': 'SRational'\n                },\n                37378: {\n                    'name': 'ApertureValue',\n                    'type': 'Rational'\n                },\n                37379: {\n                    'name': 'BrightnessValue',\n                    'type': 'SRational'\n                },\n                37380: {\n                    'name': 'ExposureBiasValue',\n                    'type': 'SRational'\n                },\n                37381: {\n                    'name': 'MaxApertureValue',\n                    'type': 'Rational'\n                },\n                37382: {\n                    'name': 'SubjectDistance',\n                    'type': 'Rational'\n                },\n                37383: {\n                    'name': 'MeteringMode',\n                    'type': 'Short'\n                },\n                37384: {\n                    'name': 'LightSource',\n                    'type': 'Short'\n                },\n                37385: {\n                    'name': 'Flash',\n                    'type': 'Short'\n                },\n                37386: {\n                    'name': 'FocalLength',\n                    'type': 'Rational'\n                },\n                37396: {\n                    'name': 'SubjectArea',\n                    'type': 'Short'\n                },\n                37500: {\n                    'name': 'MakerNote',\n                    'type': 'Undefined'\n                },\n                37510: {\n                    'name': 'UserComment',\n                    'type': 'Ascii'\n                },\n                37520: {\n                    'name': 'SubSecTime',\n                    'type': 'Ascii'\n                },\n                37521: {\n                    'name': 'SubSecTimeOriginal',\n                    'type': 'Ascii'\n                },\n                37522: {\n                    'name': 'SubSecTimeDigitized',\n                    'type': 'Ascii'\n                },\n                40960: {\n                    'name': 'FlashpixVersion',\n                    'type': 'Undefined'\n                },\n                40961: {\n                    'name': 'ColorSpace',\n                    'type': 'Short'\n                },\n                40962: {\n                    'name': 'PixelXDimension',\n                    'type': 'Long'\n                },\n                40963: {\n                    'name': 'PixelYDimension',\n                    'type': 'Long'\n                },\n                40964: {\n                    'name': 'RelatedSoundFile',\n                    'type': 'Ascii'\n                },\n                40965: {\n                    'name': 'InteroperabilityTag',\n                    'type': 'Long'\n                },\n                41483: {\n                    'name': 'FlashEnergy',\n                    'type': 'Rational'\n                },\n                41484: {\n                    'name': 'SpatialFrequencyResponse',\n                    'type': 'Undefined'\n                },\n                41486: {\n                    'name': 'FocalPlaneXResolution',\n                    'type': 'Rational'\n                },\n                41487: {\n                    'name': 'FocalPlaneYResolution',\n                    'type': 'Rational'\n                },\n                41488: {\n                    'name': 'FocalPlaneResolutionUnit',\n                    'type': 'Short'\n                },\n                41492: {\n                    'name': 'SubjectLocation',\n                    'type': 'Short'\n                },\n                41493: {\n                    'name': 'ExposureIndex',\n                    'type': 'Rational'\n                },\n                41495: {\n                    'name': 'SensingMethod',\n                    'type': 'Short'\n                },\n                41728: {\n                    'name': 'FileSource',\n                    'type': 'Undefined'\n                },\n                41729: {\n                    'name': 'SceneType',\n                    'type': 'Undefined'\n                },\n                41730: {\n                    'name': 'CFAPattern',\n                    'type': 'Undefined'\n                },\n                41985: {\n                    'name': 'CustomRendered',\n                    'type': 'Short'\n                },\n                41986: {\n                    'name': 'ExposureMode',\n                    'type': 'Short'\n                },\n                41987: {\n                    'name': 'WhiteBalance',\n                    'type': 'Short'\n                },\n                41988: {\n                    'name': 'DigitalZoomRatio',\n                    'type': 'Rational'\n                },\n                41989: {\n                    'name': 'FocalLengthIn35mmFilm',\n                    'type': 'Short'\n                },\n                41990: {\n                    'name': 'SceneCaptureType',\n                    'type': 'Short'\n                },\n                41991: {\n                    'name': 'GainControl',\n                    'type': 'Short'\n                },\n                41992: {\n                    'name': 'Contrast',\n                    'type': 'Short'\n                },\n                41993: {\n                    'name': 'Saturation',\n                    'type': 'Short'\n                },\n                41994: {\n                    'name': 'Sharpness',\n                    'type': 'Short'\n                },\n                41995: {\n                    'name': 'DeviceSettingDescription',\n                    'type': 'Undefined'\n                },\n                41996: {\n                    'name': 'SubjectDistanceRange',\n                    'type': 'Short'\n                },\n                42016: {\n                    'name': 'ImageUniqueID',\n                    'type': 'Ascii'\n                },\n                42032: {\n                    'name': 'CameraOwnerName',\n                    'type': 'Ascii'\n                },\n                42033: {\n                    'name': 'BodySerialNumber',\n                    'type': 'Ascii'\n                },\n                42034: {\n                    'name': 'LensSpecification',\n                    'type': 'Rational'\n                },\n                42035: {\n                    'name': 'LensMake',\n                    'type': 'Ascii'\n                },\n                42036: {\n                    'name': 'LensModel',\n                    'type': 'Ascii'\n                },\n                42037: {\n                    'name': 'LensSerialNumber',\n                    'type': 'Ascii'\n                },\n                42240: {\n                    'name': 'Gamma',\n                    'type': 'Rational'\n                }\n            },\n            'GPS': {\n                0: {\n                    'name': 'GPSVersionID',\n                    'type': 'Byte'\n                },\n                1: {\n                    'name': 'GPSLatitudeRef',\n                    'type': 'Ascii'\n                },\n                2: {\n                    'name': 'GPSLatitude',\n                    'type': 'Rational'\n                },\n                3: {\n                    'name': 'GPSLongitudeRef',\n                    'type': 'Ascii'\n                },\n                4: {\n                    'name': 'GPSLongitude',\n                    'type': 'Rational'\n                },\n                5: {\n                    'name': 'GPSAltitudeRef',\n                    'type': 'Byte'\n                },\n                6: {\n                    'name': 'GPSAltitude',\n                    'type': 'Rational'\n                },\n                7: {\n                    'name': 'GPSTimeStamp',\n                    'type': 'Rational'\n                },\n                8: {\n                    'name': 'GPSSatellites',\n                    'type': 'Ascii'\n                },\n                9: {\n                    'name': 'GPSStatus',\n                    'type': 'Ascii'\n                },\n                10: {\n                    'name': 'GPSMeasureMode',\n                    'type': 'Ascii'\n                },\n                11: {\n                    'name': 'GPSDOP',\n                    'type': 'Rational'\n                },\n                12: {\n                    'name': 'GPSSpeedRef',\n                    'type': 'Ascii'\n                },\n                13: {\n                    'name': 'GPSSpeed',\n                    'type': 'Rational'\n                },\n                14: {\n                    'name': 'GPSTrackRef',\n                    'type': 'Ascii'\n                },\n                15: {\n                    'name': 'GPSTrack',\n                    'type': 'Rational'\n                },\n                16: {\n                    'name': 'GPSImgDirectionRef',\n                    'type': 'Ascii'\n                },\n                17: {\n                    'name': 'GPSImgDirection',\n                    'type': 'Rational'\n                },\n                18: {\n                    'name': 'GPSMapDatum',\n                    'type': 'Ascii'\n                },\n                19: {\n                    'name': 'GPSDestLatitudeRef',\n                    'type': 'Ascii'\n                },\n                20: {\n                    'name': 'GPSDestLatitude',\n                    'type': 'Rational'\n                },\n                21: {\n                    'name': 'GPSDestLongitudeRef',\n                    'type': 'Ascii'\n                },\n                22: {\n                    'name': 'GPSDestLongitude',\n                    'type': 'Rational'\n                },\n                23: {\n                    'name': 'GPSDestBearingRef',\n                    'type': 'Ascii'\n                },\n                24: {\n                    'name': 'GPSDestBearing',\n                    'type': 'Rational'\n                },\n                25: {\n                    'name': 'GPSDestDistanceRef',\n                    'type': 'Ascii'\n                },\n                26: {\n                    'name': 'GPSDestDistance',\n                    'type': 'Rational'\n                },\n                27: {\n                    'name': 'GPSProcessingMethod',\n                    'type': 'Undefined'\n                },\n                28: {\n                    'name': 'GPSAreaInformation',\n                    'type': 'Undefined'\n                },\n                29: {\n                    'name': 'GPSDateStamp',\n                    'type': 'Ascii'\n                },\n                30: {\n                    'name': 'GPSDifferential',\n                    'type': 'Short'\n                },\n                31: {\n                    'name': 'GPSHPositioningError',\n                    'type': 'Rational'\n                }\n            },\n            'Interop': {\n                1: {\n                    'name': 'InteroperabilityIndex',\n                    'type': 'Ascii'\n                }\n            }\n        };\n        TAGS[\"0th\"] = TAGS[\"Image\"];\n        TAGS[\"1st\"] = TAGS[\"Image\"];\n        that.TAGS = TAGS;\n\n        that.ImageIFD = {\n            ProcessingSoftware: 11,\n            NewSubfileType: 254,\n            SubfileType: 255,\n            ImageWidth: 256,\n            ImageLength: 257,\n            BitsPerSample: 258,\n            Compression: 259,\n            PhotometricInterpretation: 262,\n            Threshholding: 263,\n            CellWidth: 264,\n            CellLength: 265,\n            FillOrder: 266,\n            DocumentName: 269,\n            ImageDescription: 270,\n            Make: 271,\n            Model: 272,\n            StripOffsets: 273,\n            Orientation: 274,\n            SamplesPerPixel: 277,\n            RowsPerStrip: 278,\n            StripByteCounts: 279,\n            XResolution: 282,\n            YResolution: 283,\n            PlanarConfiguration: 284,\n            GrayResponseUnit: 290,\n            GrayResponseCurve: 291,\n            T4Options: 292,\n            T6Options: 293,\n            ResolutionUnit: 296,\n            TransferFunction: 301,\n            Software: 305,\n            DateTime: 306,\n            Artist: 315,\n            HostComputer: 316,\n            Predictor: 317,\n            WhitePoint: 318,\n            PrimaryChromaticities: 319,\n            ColorMap: 320,\n            HalftoneHints: 321,\n            TileWidth: 322,\n            TileLength: 323,\n            TileOffsets: 324,\n            TileByteCounts: 325,\n            SubIFDs: 330,\n            InkSet: 332,\n            InkNames: 333,\n            NumberOfInks: 334,\n            DotRange: 336,\n            TargetPrinter: 337,\n            ExtraSamples: 338,\n            SampleFormat: 339,\n            SMinSampleValue: 340,\n            SMaxSampleValue: 341,\n            TransferRange: 342,\n            ClipPath: 343,\n            XClipPathUnits: 344,\n            YClipPathUnits: 345,\n            Indexed: 346,\n            JPEGTables: 347,\n            OPIProxy: 351,\n            JPEGProc: 512,\n            JPEGInterchangeFormat: 513,\n            JPEGInterchangeFormatLength: 514,\n            JPEGRestartInterval: 515,\n            JPEGLosslessPredictors: 517,\n            JPEGPointTransforms: 518,\n            JPEGQTables: 519,\n            JPEGDCTables: 520,\n            JPEGACTables: 521,\n            YCbCrCoefficients: 529,\n            YCbCrSubSampling: 530,\n            YCbCrPositioning: 531,\n            ReferenceBlackWhite: 532,\n            XMLPacket: 700,\n            Rating: 18246,\n            RatingPercent: 18249,\n            ImageID: 32781,\n            CFARepeatPatternDim: 33421,\n            CFAPattern: 33422,\n            BatteryLevel: 33423,\n            Copyright: 33432,\n            ExposureTime: 33434,\n            ImageResources: 34377,\n            ExifTag: 34665,\n            InterColorProfile: 34675,\n            GPSTag: 34853,\n            Interlace: 34857,\n            TimeZoneOffset: 34858,\n            SelfTimerMode: 34859,\n            FlashEnergy: 37387,\n            SpatialFrequencyResponse: 37388,\n            Noise: 37389,\n            FocalPlaneXResolution: 37390,\n            FocalPlaneYResolution: 37391,\n            FocalPlaneResolutionUnit: 37392,\n            ImageNumber: 37393,\n            SecurityClassification: 37394,\n            ImageHistory: 37395,\n            ExposureIndex: 37397,\n            TIFFEPStandardID: 37398,\n            SensingMethod: 37399,\n            XPTitle: 40091,\n            XPComment: 40092,\n            XPAuthor: 40093,\n            XPKeywords: 40094,\n            XPSubject: 40095,\n            PrintImageMatching: 50341,\n            DNGVersion: 50706,\n            DNGBackwardVersion: 50707,\n            UniqueCameraModel: 50708,\n            LocalizedCameraModel: 50709,\n            CFAPlaneColor: 50710,\n            CFALayout: 50711,\n            LinearizationTable: 50712,\n            BlackLevelRepeatDim: 50713,\n            BlackLevel: 50714,\n            BlackLevelDeltaH: 50715,\n            BlackLevelDeltaV: 50716,\n            WhiteLevel: 50717,\n            DefaultScale: 50718,\n            DefaultCropOrigin: 50719,\n            DefaultCropSize: 50720,\n            ColorMatrix1: 50721,\n            ColorMatrix2: 50722,\n            CameraCalibration1: 50723,\n            CameraCalibration2: 50724,\n            ReductionMatrix1: 50725,\n            ReductionMatrix2: 50726,\n            AnalogBalance: 50727,\n            AsShotNeutral: 50728,\n            AsShotWhiteXY: 50729,\n            BaselineExposure: 50730,\n            BaselineNoise: 50731,\n            BaselineSharpness: 50732,\n            BayerGreenSplit: 50733,\n            LinearResponseLimit: 50734,\n            CameraSerialNumber: 50735,\n            LensInfo: 50736,\n            ChromaBlurRadius: 50737,\n            AntiAliasStrength: 50738,\n            ShadowScale: 50739,\n            DNGPrivateData: 50740,\n            MakerNoteSafety: 50741,\n            CalibrationIlluminant1: 50778,\n            CalibrationIlluminant2: 50779,\n            BestQualityScale: 50780,\n            RawDataUniqueID: 50781,\n            OriginalRawFileName: 50827,\n            OriginalRawFileData: 50828,\n            ActiveArea: 50829,\n            MaskedAreas: 50830,\n            AsShotICCProfile: 50831,\n            AsShotPreProfileMatrix: 50832,\n            CurrentICCProfile: 50833,\n            CurrentPreProfileMatrix: 50834,\n            ColorimetricReference: 50879,\n            CameraCalibrationSignature: 50931,\n            ProfileCalibrationSignature: 50932,\n            AsShotProfileName: 50934,\n            NoiseReductionApplied: 50935,\n            ProfileName: 50936,\n            ProfileHueSatMapDims: 50937,\n            ProfileHueSatMapData1: 50938,\n            ProfileHueSatMapData2: 50939,\n            ProfileToneCurve: 50940,\n            ProfileEmbedPolicy: 50941,\n            ProfileCopyright: 50942,\n            ForwardMatrix1: 50964,\n            ForwardMatrix2: 50965,\n            PreviewApplicationName: 50966,\n            PreviewApplicationVersion: 50967,\n            PreviewSettingsName: 50968,\n            PreviewSettingsDigest: 50969,\n            PreviewColorSpace: 50970,\n            PreviewDateTime: 50971,\n            RawImageDigest: 50972,\n            OriginalRawFileDigest: 50973,\n            SubTileBlockSize: 50974,\n            RowInterleaveFactor: 50975,\n            ProfileLookTableDims: 50981,\n            ProfileLookTableData: 50982,\n            OpcodeList1: 51008,\n            OpcodeList2: 51009,\n            OpcodeList3: 51022,\n            NoiseProfile: 51041\n        };\n\n        that.ExifIFD = {\n            ExposureTime: 33434,\n            FNumber: 33437,\n            ExposureProgram: 34850,\n            SpectralSensitivity: 34852,\n            ISOSpeedRatings: 34855,\n            OECF: 34856,\n            SensitivityType: 34864,\n            StandardOutputSensitivity: 34865,\n            RecommendedExposureIndex: 34866,\n            ISOSpeed: 34867,\n            ISOSpeedLatitudeyyy: 34868,\n            ISOSpeedLatitudezzz: 34869,\n            ExifVersion: 36864,\n            DateTimeOriginal: 36867,\n            DateTimeDigitized: 36868,\n            ComponentsConfiguration: 37121,\n            CompressedBitsPerPixel: 37122,\n            ShutterSpeedValue: 37377,\n            ApertureValue: 37378,\n            BrightnessValue: 37379,\n            ExposureBiasValue: 37380,\n            MaxApertureValue: 37381,\n            SubjectDistance: 37382,\n            MeteringMode: 37383,\n            LightSource: 37384,\n            Flash: 37385,\n            FocalLength: 37386,\n            SubjectArea: 37396,\n            MakerNote: 37500,\n            UserComment: 37510,\n            SubSecTime: 37520,\n            SubSecTimeOriginal: 37521,\n            SubSecTimeDigitized: 37522,\n            FlashpixVersion: 40960,\n            ColorSpace: 40961,\n            PixelXDimension: 40962,\n            PixelYDimension: 40963,\n            RelatedSoundFile: 40964,\n            InteroperabilityTag: 40965,\n            FlashEnergy: 41483,\n            SpatialFrequencyResponse: 41484,\n            FocalPlaneXResolution: 41486,\n            FocalPlaneYResolution: 41487,\n            FocalPlaneResolutionUnit: 41488,\n            SubjectLocation: 41492,\n            ExposureIndex: 41493,\n            SensingMethod: 41495,\n            FileSource: 41728,\n            SceneType: 41729,\n            CFAPattern: 41730,\n            CustomRendered: 41985,\n            ExposureMode: 41986,\n            WhiteBalance: 41987,\n            DigitalZoomRatio: 41988,\n            FocalLengthIn35mmFilm: 41989,\n            SceneCaptureType: 41990,\n            GainControl: 41991,\n            Contrast: 41992,\n            Saturation: 41993,\n            Sharpness: 41994,\n            DeviceSettingDescription: 41995,\n            SubjectDistanceRange: 41996,\n            ImageUniqueID: 42016,\n            CameraOwnerName: 42032,\n            BodySerialNumber: 42033,\n            LensSpecification: 42034,\n            LensMake: 42035,\n            LensModel: 42036,\n            LensSerialNumber: 42037,\n            Gamma: 42240\n        };\n\n        that.GPSIFD = {\n            GPSVersionID: 0,\n            GPSLatitudeRef: 1,\n            GPSLatitude: 2,\n            GPSLongitudeRef: 3,\n            GPSLongitude: 4,\n            GPSAltitudeRef: 5,\n            GPSAltitude: 6,\n            GPSTimeStamp: 7,\n            GPSSatellites: 8,\n            GPSStatus: 9,\n            GPSMeasureMode: 10,\n            GPSDOP: 11,\n            GPSSpeedRef: 12,\n            GPSSpeed: 13,\n            GPSTrackRef: 14,\n            GPSTrack: 15,\n            GPSImgDirectionRef: 16,\n            GPSImgDirection: 17,\n            GPSMapDatum: 18,\n            GPSDestLatitudeRef: 19,\n            GPSDestLatitude: 20,\n            GPSDestLongitudeRef: 21,\n            GPSDestLongitude: 22,\n            GPSDestBearingRef: 23,\n            GPSDestBearing: 24,\n            GPSDestDistanceRef: 25,\n            GPSDestDistance: 26,\n            GPSProcessingMethod: 27,\n            GPSAreaInformation: 28,\n            GPSDateStamp: 29,\n            GPSDifferential: 30,\n            GPSHPositioningError: 31\n        };\n\n        that.InteropIFD = {\n            InteroperabilityIndex: 1\n        };\n\n        if (typeof exports !== 'undefined') {\n            if (typeof module !== 'undefined' && module.exports) {\n                exports = module.exports = that;\n            }\n            exports.piexif = that;\n        } else {\n            window.piexif = that;\n        }\n    })();\n});\n\n},{}],3:[function(require,module,exports){\n(function (global, factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine([\"exports\"], factory);\n\t} else if (typeof exports !== \"undefined\") {\n\t\tfactory(exports);\n\t} else {\n\t\tvar mod = {\n\t\t\texports: {}\n\t\t};\n\t\tfactory(mod.exports);\n\t\tglobal.resize = mod.exports;\n\t}\n})(this, function (exports) {\n\t\"use strict\";\n\n\t(function (global, factory) {\n\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\tdefine([\"exports\"], factory);\n\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\tfactory(exports);\n\t\t} else {\n\t\t\tvar mod = {\n\t\t\t\texports: {}\n\t\t\t};\n\t\t\tfactory(mod.exports);\n\t\t\tglobal.resize = mod.exports;\n\t\t}\n\t})(undefined, function (exports) {\n\t\t\"use strict\";\n\n\t\t(function (global, factory) {\n\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\tfactory(exports);\n\t\t\t} else {\n\t\t\t\tvar mod = {\n\t\t\t\t\texports: {}\n\t\t\t\t};\n\t\t\t\tfactory(mod.exports);\n\t\t\t\tglobal.resize = mod.exports;\n\t\t\t}\n\t\t})(undefined, function (exports) {\n\t\t\t\"use strict\";\n\n\t\t\t(function (global, factory) {\n\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\tfactory(exports);\n\t\t\t\t} else {\n\t\t\t\t\tvar mod = {\n\t\t\t\t\t\texports: {}\n\t\t\t\t\t};\n\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t}\n\t\t\t})(undefined, function (exports) {\n\t\t\t\t\"use strict\";\n\n\t\t\t\t(function (global, factory) {\n\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t}\n\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t}\n\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t\t(function (global, factory) {\n\t\t\t\t\t\t\t\t\t\tif (typeof define === \"function\" && define.amd) {\n\t\t\t\t\t\t\t\t\t\t\tdefine([\"exports\"], factory);\n\t\t\t\t\t\t\t\t\t\t} else if (typeof exports !== \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\tfactory(exports);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tvar mod = {\n\t\t\t\t\t\t\t\t\t\t\t\texports: {}\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tfactory(mod.exports);\n\t\t\t\t\t\t\t\t\t\t\tglobal.resize = mod.exports;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})(undefined, function (exports) {\n\t\t\t\t\t\t\t\t\t\t\"use strict\";\n\n\t\t\t\t\t\t\t\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\t\t\t\t\t\t\t\tvalue: true\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\texports.Resize = Resize;\n\t\t\t\t\t\t\t\t\t\t//JavaScript Image Resizer (c) 2012 - Grant Galitz\n\t\t\t\t\t\t\t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\t\t\t\t\t\t\t\t\tvar paths = scripts[scripts.length - 1].src.split(\"/\");\n\t\t\t\t\t\t\t\t\t\tpaths.pop();\n\t\t\t\t\t\t\t\t\t\tvar sourceOfWorker = paths.join(\"/\") + \"/resize\";\n\t\t\t\t\t\t\t\t\t\tfunction Resize(widthOriginal, heightOriginal, targetWidth, targetHeight, blendAlpha, interpolationPass, useWebWorker, resizeCallback) {\n\t\t\t\t\t\t\t\t\t\t\tthis.widthOriginal = Math.abs(parseInt(widthOriginal) || 0);\n\t\t\t\t\t\t\t\t\t\t\tthis.heightOriginal = Math.abs(parseInt(heightOriginal) || 0);\n\t\t\t\t\t\t\t\t\t\t\tthis.targetWidth = Math.abs(parseInt(targetWidth) || 0);\n\t\t\t\t\t\t\t\t\t\t\tthis.targetHeight = Math.abs(parseInt(targetHeight) || 0);\n\t\t\t\t\t\t\t\t\t\t\tthis.colorChannels = !!blendAlpha ? 4 : 3;\n\t\t\t\t\t\t\t\t\t\t\tthis.interpolationPass = !!interpolationPass;\n\t\t\t\t\t\t\t\t\t\t\tthis.useWebWorker = !!useWebWorker;\n\t\t\t\t\t\t\t\t\t\t\tthis.resizeCallback = typeof resizeCallback == \"function\" ? resizeCallback : function (returnedArray) {};\n\t\t\t\t\t\t\t\t\t\t\tthis.targetWidthMultipliedByChannels = this.targetWidth * this.colorChannels;\n\t\t\t\t\t\t\t\t\t\t\tthis.originalWidthMultipliedByChannels = this.widthOriginal * this.colorChannels;\n\t\t\t\t\t\t\t\t\t\t\tthis.originalHeightMultipliedByChannels = this.heightOriginal * this.colorChannels;\n\t\t\t\t\t\t\t\t\t\t\tthis.widthPassResultSize = this.targetWidthMultipliedByChannels * this.heightOriginal;\n\t\t\t\t\t\t\t\t\t\t\tthis.finalResultSize = this.targetWidthMultipliedByChannels * this.targetHeight;\n\t\t\t\t\t\t\t\t\t\t\tthis.initialize();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tResize.prototype.initialize = function () {\n\t\t\t\t\t\t\t\t\t\t\t//Perform some checks:\n\t\t\t\t\t\t\t\t\t\t\tif (this.widthOriginal > 0 && this.heightOriginal > 0 && this.targetWidth > 0 && this.targetHeight > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (this.useWebWorker) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.useWebWorker = this.widthOriginal != this.targetWidth || this.heightOriginal != this.targetHeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.useWebWorker) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.configureWorker();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif (!this.useWebWorker) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.configurePasses();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\"Invalid settings specified for the resizer.\");\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.configureWorker = function () {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tvar parentObj = this;\n\t\t\t\t\t\t\t\t\t\t\t\tthis.worker = new Worker(sourceOfWorker.substring(0, sourceOfWorker.length - 3) + \"Worker.js\");\n\t\t\t\t\t\t\t\t\t\t\t\tthis.worker.onmessage = function (event) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tparentObj.heightBuffer = event.data;\n\t\t\t\t\t\t\t\t\t\t\t\t\tparentObj.resizeCallback(parentObj.heightBuffer);\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tthis.worker.postMessage([\"setup\", this.widthOriginal, this.heightOriginal, this.targetWidth, this.targetHeight, this.colorChannels, this.interpolationPass]);\n\t\t\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.useWebWorker = false;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.configurePasses = function () {\n\t\t\t\t\t\t\t\t\t\t\tif (this.widthOriginal == this.targetWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t//Bypass the width resizer pass:\n\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeWidth = this.bypassResizer;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t//Setup the width resizer pass:\n\t\t\t\t\t\t\t\t\t\t\t\tthis.ratioWeightWidthPass = this.widthOriginal / this.targetWidth;\n\t\t\t\t\t\t\t\t\t\t\t\tif (this.ratioWeightWidthPass < 1 && this.interpolationPass) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.initializeFirstPassBuffers(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeWidth = this.colorChannels == 4 ? this.resizeWidthInterpolatedRGBA : this.resizeWidthInterpolatedRGB;\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.initializeFirstPassBuffers(false);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeWidth = this.colorChannels == 4 ? this.resizeWidthRGBA : this.resizeWidthRGB;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif (this.heightOriginal == this.targetHeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t//Bypass the height resizer pass:\n\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeHeight = this.bypassResizer;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t//Setup the height resizer pass:\n\t\t\t\t\t\t\t\t\t\t\t\tthis.ratioWeightHeightPass = this.heightOriginal / this.targetHeight;\n\t\t\t\t\t\t\t\t\t\t\t\tif (this.ratioWeightHeightPass < 1 && this.interpolationPass) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.initializeSecondPassBuffers(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeHeight = this.resizeHeightInterpolated;\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.initializeSecondPassBuffers(false);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeHeight = this.colorChannels == 4 ? this.resizeHeightRGBA : this.resizeHeightRGB;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeWidthRGB = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightWidthPass;\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeightDivisor = 1 / ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar amountToNext = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar actualPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar currentPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar line = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar outputOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar nextLineOffsetOriginalWidth = this.originalWidthMultipliedByChannels - 2;\n\t\t\t\t\t\t\t\t\t\t\tvar nextLineOffsetTargetWidth = this.targetWidthMultipliedByChannels - 2;\n\t\t\t\t\t\t\t\t\t\t\tvar output = this.outputWidthWorkBench;\n\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.widthBuffer;\n\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0; line < this.originalHeightMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tweight = ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (weight >= amountToNext) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition = actualPosition = actualPosition + 3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition += weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t} while (weight > 0 && actualPosition < this.originalWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = outputOffset; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetTargetWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\toutputOffset += 3;\n\t\t\t\t\t\t\t\t\t\t\t} while (outputOffset < this.targetWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeWidthInterpolatedRGB = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightWidthPass;\n\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar finalOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar firstWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar secondWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.widthBuffer;\n\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for start calculation:\n\t\t\t\t\t\t\t\t\t\t\tfor (var targetPosition = 0; weight < 1 / 3; targetPosition += 3, weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = 0; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t//Adjust for overshoot of the last pass's counter:\n\t\t\t\t\t\t\t\t\t\t\tweight -= 1 / 3;\n\t\t\t\t\t\t\t\t\t\t\tfor (var interpolationWidthSourceReadStop = this.widthOriginal - 1; weight < interpolationWidthSourceReadStop; targetPosition += 3, weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t//Calculate weightings:\n\t\t\t\t\t\t\t\t\t\t\t\tsecondWeight = weight % 1;\n\t\t\t\t\t\t\t\t\t\t\t\tfirstWeight = 1 - secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t//Interpolate:\n\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = Math.floor(weight) * 3; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset] * firstWeight + buffer[pixelOffset + 3] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1] * firstWeight + buffer[pixelOffset + 4] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2] * firstWeight + buffer[pixelOffset + 5] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for end calculation:\n\t\t\t\t\t\t\t\t\t\t\tfor (interpolationWidthSourceReadStop = this.originalWidthMultipliedByChannels - 3; targetPosition < this.targetWidthMultipliedByChannels; targetPosition += 3) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = interpolationWidthSourceReadStop; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeWidthRGBA = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightWidthPass;\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeightDivisor = 1 / ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar amountToNext = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar actualPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar currentPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar line = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar outputOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar nextLineOffsetOriginalWidth = this.originalWidthMultipliedByChannels - 3;\n\t\t\t\t\t\t\t\t\t\t\tvar nextLineOffsetTargetWidth = this.targetWidthMultipliedByChannels - 3;\n\t\t\t\t\t\t\t\t\t\t\tvar output = this.outputWidthWorkBench;\n\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.widthBuffer;\n\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0; line < this.originalHeightMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tweight = ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (weight >= amountToNext) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition = actualPosition = actualPosition + 4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[line++] += buffer[pixelOffset] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition += weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t} while (weight > 0 && actualPosition < this.originalWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t\tfor (line = 0, pixelOffset = outputOffset; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetTargetWidth) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset++] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[pixelOffset] = output[line++] * ratioWeightDivisor;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\toutputOffset += 4;\n\t\t\t\t\t\t\t\t\t\t\t} while (outputOffset < this.targetWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeWidthInterpolatedRGBA = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightWidthPass;\n\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar finalOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar firstWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar secondWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.widthBuffer;\n\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for start calculation:\n\t\t\t\t\t\t\t\t\t\t\tfor (var targetPosition = 0; weight < 1 / 3; targetPosition += 4, weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = 0; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t//Adjust for overshoot of the last pass's counter:\n\t\t\t\t\t\t\t\t\t\t\tweight -= 1 / 3;\n\t\t\t\t\t\t\t\t\t\t\tfor (var interpolationWidthSourceReadStop = this.widthOriginal - 1; weight < interpolationWidthSourceReadStop; targetPosition += 4, weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t//Calculate weightings:\n\t\t\t\t\t\t\t\t\t\t\t\tsecondWeight = weight % 1;\n\t\t\t\t\t\t\t\t\t\t\t\tfirstWeight = 1 - secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t//Interpolate:\n\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = Math.floor(weight) * 4; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset] * firstWeight + buffer[pixelOffset + 4] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1] * firstWeight + buffer[pixelOffset + 5] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2] * firstWeight + buffer[pixelOffset + 6] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 3] = buffer[pixelOffset + 3] * firstWeight + buffer[pixelOffset + 7] * secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for end calculation:\n\t\t\t\t\t\t\t\t\t\t\tfor (interpolationWidthSourceReadStop = this.originalWidthMultipliedByChannels - 4; targetPosition < this.targetWidthMultipliedByChannels; targetPosition += 4) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (finalOffset = targetPosition, pixelOffset = interpolationWidthSourceReadStop; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset] = buffer[pixelOffset];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeHeightRGB = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightHeightPass;\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeightDivisor = 1 / ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar amountToNext = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar actualPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar currentPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar outputOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar output = this.outputHeightWorkBench;\n\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.heightBuffer;\n\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tweight = ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (weight >= amountToNext) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition = actualPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0, amountToNext = actualPosition; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition += weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t} while (weight > 0 && actualPosition < this.widthPassResultSize);\n\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} while (outputOffset < this.finalResultSize);\n\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeHeightInterpolated = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightHeightPass;\n\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar finalOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar pixelOffsetAccumulated = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar pixelOffsetAccumulated2 = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar firstWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar secondWeight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.heightBuffer;\n\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for start calculation:\n\t\t\t\t\t\t\t\t\t\t\tfor (; weight < 1 / 3; weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset++] = Math.round(buffer[pixelOffset++]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t//Adjust for overshoot of the last pass's counter:\n\t\t\t\t\t\t\t\t\t\t\tweight -= 1 / 3;\n\t\t\t\t\t\t\t\t\t\t\tfor (var interpolationHeightSourceReadStop = this.heightOriginal - 1; weight < interpolationHeightSourceReadStop; weight += ratioWeight) {\n\t\t\t\t\t\t\t\t\t\t\t\t//Calculate weightings:\n\t\t\t\t\t\t\t\t\t\t\t\tsecondWeight = weight % 1;\n\t\t\t\t\t\t\t\t\t\t\t\tfirstWeight = 1 - secondWeight;\n\t\t\t\t\t\t\t\t\t\t\t\t//Interpolate:\n\t\t\t\t\t\t\t\t\t\t\t\tpixelOffsetAccumulated = Math.floor(weight) * this.targetWidthMultipliedByChannels;\n\t\t\t\t\t\t\t\t\t\t\t\tpixelOffsetAccumulated2 = pixelOffsetAccumulated + this.targetWidthMultipliedByChannels;\n\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++] * firstWeight + buffer[pixelOffsetAccumulated2++] * secondWeight);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t//Handle for only one interpolation input being valid for end calculation:\n\t\t\t\t\t\t\t\t\t\t\twhile (finalOffset < this.finalResultSize) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0, pixelOffsetAccumulated = interpolationHeightSourceReadStop * this.targetWidthMultipliedByChannels; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.resizeHeightRGBA = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeight = this.ratioWeightHeightPass;\n\t\t\t\t\t\t\t\t\t\t\tvar ratioWeightDivisor = 1 / ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\tvar weight = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar amountToNext = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar actualPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar currentPosition = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar pixelOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar outputOffset = 0;\n\t\t\t\t\t\t\t\t\t\t\tvar output = this.outputHeightWorkBench;\n\t\t\t\t\t\t\t\t\t\t\tvar outputBuffer = this.heightBuffer;\n\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tweight = ratioWeight;\n\t\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (weight >= amountToNext) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[actualPosition++] * amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition = actualPosition;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight -= amountToNext;\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0, amountToNext = actualPosition; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutput[pixelOffset++] += buffer[amountToNext++] * weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPosition += weight;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t} while (weight > 0 && actualPosition < this.widthPassResultSize);\n\t\t\t\t\t\t\t\t\t\t\t\tfor (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t\toutputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} while (outputOffset < this.finalResultSize);\n\t\t\t\t\t\t\t\t\t\t\treturn outputBuffer;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.resize = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\tif (this.useWebWorker) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.worker.postMessage([\"resize\", buffer]);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.resizeCallback(this.resizeHeight(this.resizeWidth(buffer)));\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.bypassResizer = function (buffer) {\n\t\t\t\t\t\t\t\t\t\t\t//Just return the buffer passsed:\n\t\t\t\t\t\t\t\t\t\t\treturn buffer;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.initializeFirstPassBuffers = function (BILINEARAlgo) {\n\t\t\t\t\t\t\t\t\t\t\t//Initialize the internal width pass buffers:\n\t\t\t\t\t\t\t\t\t\t\tthis.widthBuffer = this.generateFloatBuffer(this.widthPassResultSize);\n\t\t\t\t\t\t\t\t\t\t\tif (!BILINEARAlgo) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.outputWidthWorkBench = this.generateFloatBuffer(this.originalHeightMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.initializeSecondPassBuffers = function (BILINEARAlgo) {\n\t\t\t\t\t\t\t\t\t\t\t//Initialize the internal height pass buffers:\n\t\t\t\t\t\t\t\t\t\t\tthis.heightBuffer = this.generateUint8Buffer(this.finalResultSize);\n\t\t\t\t\t\t\t\t\t\t\tif (!BILINEARAlgo) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.outputHeightWorkBench = this.generateFloatBuffer(this.targetWidthMultipliedByChannels);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.generateFloatBuffer = function (bufferLength) {\n\t\t\t\t\t\t\t\t\t\t\t//Generate a float32 typed array buffer:\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\treturn new Float32Array(bufferLength);\n\t\t\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tResize.prototype.generateUint8Buffer = function (bufferLength) {\n\t\t\t\t\t\t\t\t\t\t\t//Generate a uint8 typed array buffer:\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\treturn new Uint8Array(bufferLength);\n\t\t\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});\n\n},{}]},{},[1]);\n"],"sourceRoot":"/source/"}